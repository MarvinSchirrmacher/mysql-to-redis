// Generated from /Users/MarvinSchirrmacher/Applications/fh-bielefeld-compilerbau/parser/src/MySqlParser.g4 by ANTLR 4.7
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class MySqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		SPACE=1, SPEC_MYSQL_COMMENT=2, COMMENT_INPUT=3, LINE_COMMENT=4, ADD=5, 
		ALL=6, ALTER=7, ANALYZE=8, AND=9, AS=10, ASC=11, BEFORE=12, BETWEEN=13, 
		BOTH=14, BY=15, CALL=16, CASCADE=17, CASE=18, CAST=19, CHANGE=20, CHARACTER=21, 
		CHECK=22, COLLATE=23, COLUMN=24, CONDITION=25, CONSTRAINT=26, CONTINUE=27, 
		CONVERT=28, CREATE=29, CROSS=30, CURRENT_USER=31, CURSOR=32, DATABASE=33, 
		DATABASES=34, DECLARE=35, DEFAULT=36, DELAYED=37, DELETE=38, DESC=39, 
		DESCRIBE=40, DETERMINISTIC=41, DISTINCT=42, DISTINCTROW=43, DROP=44, EACH=45, 
		ELSE=46, ELSEIF=47, ENCLOSED=48, ESCAPED=49, EXISTS=50, EXIT=51, EXPLAIN=52, 
		FALSE=53, FETCH=54, FOR=55, FORCE=56, FOREIGN=57, FROM=58, FULLTEXT=59, 
		GRANT=60, GROUP=61, HAVING=62, HIGH_PRIORITY=63, IF=64, IGNORE=65, IN=66, 
		INDEX=67, INFILE=68, INNER=69, INOUT=70, INSERT=71, INTERVAL=72, INTO=73, 
		IS=74, ITERATE=75, JOIN=76, KEY=77, KEYS=78, KILL=79, LEADING=80, LEAVE=81, 
		LEFT=82, LIKE=83, LIMIT=84, LINEAR=85, LINES=86, LOAD=87, LOCK=88, LOOP=89, 
		LOW_PRIORITY=90, MASTER_BIND=91, MASTER_SSL_VERIFY_SERVER_CERT=92, MATCH=93, 
		MAXVALUE=94, MODIFIES=95, NATURAL=96, NOT=97, NO_WRITE_TO_BINLOG=98, NULL_LITERAL=99, 
		ON=100, OPTIMIZE=101, OPTION=102, OPTIONALLY=103, OR=104, ORDER=105, OUT=106, 
		OUTER=107, OUTFILE=108, PARTITION=109, PRIMARY=110, PROCEDURE=111, PURGE=112, 
		RANGE=113, READ=114, READS=115, REFERENCES=116, REGEXP=117, RELEASE=118, 
		RENAME=119, REPEAT=120, REPLACE=121, REQUIRE=122, RESTRICT=123, RETURN=124, 
		REVOKE=125, RIGHT=126, RLIKE=127, SCHEMA=128, SCHEMAS=129, SELECT=130, 
		SET=131, SEPARATOR=132, SHOW=133, SPATIAL=134, SQL=135, SQLEXCEPTION=136, 
		SQLSTATE=137, SQLWARNING=138, SQL_BIG_RESULT=139, SQL_CALC_FOUND_ROWS=140, 
		SQL_SMALL_RESULT=141, SSL=142, STARTING=143, STRAIGHT_JOIN=144, TABLE=145, 
		TERMINATED=146, THEN=147, TO=148, TRAILING=149, TRIGGER=150, TRUE=151, 
		UNDO=152, UNION=153, UNIQUE=154, UNLOCK=155, UNSIGNED=156, UPDATE=157, 
		USAGE=158, USE=159, USING=160, VALUES=161, WHEN=162, WHERE=163, WHILE=164, 
		WITH=165, WRITE=166, XOR=167, ZEROFILL=168, TINYINT=169, SMALLINT=170, 
		MEDIUMINT=171, INT=172, INTEGER=173, BIGINT=174, REAL=175, DOUBLE=176, 
		FLOAT=177, DECIMAL=178, NUMERIC=179, DATE=180, TIME=181, TIMESTAMP=182, 
		DATETIME=183, YEAR=184, CHAR=185, VARCHAR=186, BINARY=187, VARBINARY=188, 
		TINYBLOB=189, BLOB=190, MEDIUMBLOB=191, LONGBLOB=192, TINYTEXT=193, TEXT=194, 
		MEDIUMTEXT=195, LONGTEXT=196, ENUM=197, YEAR_MONTH=198, DAY_HOUR=199, 
		DAY_MINUTE=200, DAY_SECOND=201, HOUR_MINUTE=202, HOUR_SECOND=203, MINUTE_SECOND=204, 
		SECOND_MICROSECOND=205, MINUTE_MICROSECOND=206, HOUR_MICROSECOND=207, 
		DAY_MICROSECOND=208, AVG=209, BIT_AND=210, BIT_OR=211, BIT_XOR=212, COUNT=213, 
		GROUP_CONCAT=214, MAX=215, MIN=216, STD=217, STDDEV=218, STDDEV_POP=219, 
		STDDEV_SAMP=220, SUM=221, VAR_POP=222, VAR_SAMP=223, VARIANCE=224, CURRENT_DATE=225, 
		CURRENT_TIME=226, CURRENT_TIMESTAMP=227, LOCALTIME=228, CURDATE=229, CURTIME=230, 
		DATE_ADD=231, DATE_SUB=232, EXTRACT=233, LOCALTIMESTAMP=234, NOW=235, 
		POSITION=236, SUBSTR=237, SUBSTRING=238, SYSDATE=239, TRIM=240, UTC_DATE=241, 
		UTC_TIME=242, UTC_TIMESTAMP=243, ACCOUNT=244, ACTION=245, AFTER=246, AGGREGATE=247, 
		ALGORITHM=248, ANY=249, AT=250, AUTHORS=251, AUTOCOMMIT=252, AUTOEXTEND_SIZE=253, 
		AUTO_INCREMENT=254, AVG_ROW_LENGTH=255, BEGIN=256, BINLOG=257, BIT=258, 
		BLOCK=259, BOOL=260, BOOLEAN=261, BTREE=262, CACHE=263, CASCADED=264, 
		CHAIN=265, CHANGED=266, CHANNEL=267, CHECKSUM=268, CIPHER=269, CLIENT=270, 
		CLOSE=271, COALESCE=272, CODE=273, COLUMNS=274, COLUMN_FORMAT=275, COMMENT=276, 
		COMMIT=277, COMPACT=278, COMPLETION=279, COMPRESSED=280, COMPRESSION=281, 
		CONCURRENT=282, CONNECTION=283, CONSISTENT=284, CONTAINS=285, CONTEXT=286, 
		CONTRIBUTORS=287, COPY=288, CPU=289, DATA=290, DATAFILE=291, DEALLOCATE=292, 
		DEFAULT_AUTH=293, DEFINER=294, DELAY_KEY_WRITE=295, DES_KEY_FILE=296, 
		DIRECTORY=297, DISABLE=298, DISCARD=299, DISK=300, DO=301, DUMPFILE=302, 
		DUPLICATE=303, DYNAMIC=304, ENABLE=305, ENCRYPTION=306, END=307, ENDS=308, 
		ENGINE=309, ENGINES=310, ERROR=311, ERRORS=312, ESCAPE=313, EVEN=314, 
		EVENT=315, EVENTS=316, EVERY=317, EXCHANGE=318, EXCLUSIVE=319, EXPIRE=320, 
		EXPORT=321, EXTENDED=322, EXTENT_SIZE=323, FAST=324, FAULTS=325, FIELDS=326, 
		FILE_BLOCK_SIZE=327, FILTER=328, FIRST=329, FIXED=330, FLUSH=331, FOLLOWS=332, 
		FOUND=333, FULL=334, FUNCTION=335, GENERAL=336, GLOBAL=337, GRANTS=338, 
		GROUP_REPLICATION=339, HANDLER=340, HASH=341, HELP=342, HOST=343, HOSTS=344, 
		IDENTIFIED=345, IGNORE_SERVER_IDS=346, IMPORT=347, INDEXES=348, INITIAL_SIZE=349, 
		INPLACE=350, INSERT_METHOD=351, INSTALL=352, INSTANCE=353, INVOKER=354, 
		IO=355, IO_THREAD=356, IPC=357, ISOLATION=358, ISSUER=359, JSON=360, KEY_BLOCK_SIZE=361, 
		LANGUAGE=362, LAST=363, LEAVES=364, LESS=365, LEVEL=366, LIST=367, LOCAL=368, 
		LOGFILE=369, LOGS=370, MASTER=371, MASTER_AUTO_POSITION=372, MASTER_CONNECT_RETRY=373, 
		MASTER_DELAY=374, MASTER_HEARTBEAT_PERIOD=375, MASTER_HOST=376, MASTER_LOG_FILE=377, 
		MASTER_LOG_POS=378, MASTER_PASSWORD=379, MASTER_PORT=380, MASTER_RETRY_COUNT=381, 
		MASTER_SSL=382, MASTER_SSL_CA=383, MASTER_SSL_CAPATH=384, MASTER_SSL_CERT=385, 
		MASTER_SSL_CIPHER=386, MASTER_SSL_CRL=387, MASTER_SSL_CRLPATH=388, MASTER_SSL_KEY=389, 
		MASTER_TLS_VERSION=390, MASTER_USER=391, MAX_CONNECTIONS_PER_HOUR=392, 
		MAX_QUERIES_PER_HOUR=393, MAX_ROWS=394, MAX_SIZE=395, MAX_UPDATES_PER_HOUR=396, 
		MAX_USER_CONNECTIONS=397, MEDIUM=398, MERGE=399, MID=400, MIGRATE=401, 
		MIN_ROWS=402, MODE=403, MODIFY=404, MUTEX=405, MYSQL=406, NAME=407, NAMES=408, 
		NCHAR=409, NEVER=410, NEXT=411, NO=412, NODEGROUP=413, NONE=414, OFFLINE=415, 
		OFFSET=416, OJ=417, OLD_PASSWORD=418, ONE=419, ONLINE=420, ONLY=421, OPEN=422, 
		OPTIMIZER_COSTS=423, OPTIONS=424, OWNER=425, PACK_KEYS=426, PAGE=427, 
		PARSER=428, PARTIAL=429, PARTITIONING=430, PARTITIONS=431, PASSWORD=432, 
		PHASE=433, PLUGIN=434, PLUGIN_DIR=435, PLUGINS=436, PORT=437, PRECEDES=438, 
		PREPARE=439, PRESERVE=440, PREV=441, PROCESSLIST=442, PROFILE=443, PROFILES=444, 
		PROXY=445, QUERY=446, QUICK=447, REBUILD=448, RECOVER=449, REDO_BUFFER_SIZE=450, 
		REDUNDANT=451, RELAY=452, RELAY_LOG_FILE=453, RELAY_LOG_POS=454, RELAYLOG=455, 
		REMOVE=456, REORGANIZE=457, REPAIR=458, REPLICATE_DO_DB=459, REPLICATE_DO_TABLE=460, 
		REPLICATE_IGNORE_DB=461, REPLICATE_IGNORE_TABLE=462, REPLICATE_REWRITE_DB=463, 
		REPLICATE_WILD_DO_TABLE=464, REPLICATE_WILD_IGNORE_TABLE=465, REPLICATION=466, 
		RESET=467, RESUME=468, RETURNS=469, ROLLBACK=470, ROLLUP=471, ROTATE=472, 
		ROW=473, ROWS=474, ROW_FORMAT=475, SAVEPOINT=476, SCHEDULE=477, SECURITY=478, 
		SERVER=479, SESSION=480, SHARE=481, SHARED=482, SIGNED=483, SIMPLE=484, 
		SLAVE=485, SLOW=486, SNAPSHOT=487, SOCKET=488, SOME=489, SONAME=490, SOUNDS=491, 
		SOURCE=492, SQL_AFTER_GTIDS=493, SQL_AFTER_MTS_GAPS=494, SQL_BEFORE_GTIDS=495, 
		SQL_BUFFER_RESULT=496, SQL_CACHE=497, SQL_NO_CACHE=498, SQL_THREAD=499, 
		START=500, STARTS=501, STATS_AUTO_RECALC=502, STATS_PERSISTENT=503, STATS_SAMPLE_PAGES=504, 
		STATUS=505, STOP=506, STORAGE=507, STRING=508, SUBJECT=509, SUBPARTITION=510, 
		SUBPARTITIONS=511, SUSPEND=512, SWAPS=513, SWITCHES=514, TABLESPACE=515, 
		TEMPORARY=516, TEMPTABLE=517, THAN=518, TRADITIONAL=519, TRANSACTION=520, 
		TRIGGERS=521, TRUNCATE=522, UNDEFINED=523, UNDOFILE=524, UNDO_BUFFER_SIZE=525, 
		UNINSTALL=526, UNKNOWN=527, UNTIL=528, UPGRADE=529, USER=530, USE_FRM=531, 
		USER_RESOURCES=532, VALIDATION=533, VALUE=534, VARIABLES=535, VIEW=536, 
		WAIT=537, WARNINGS=538, WITHOUT=539, WORK=540, WRAPPER=541, X509=542, 
		XA=543, XML=544, EUR=545, USA=546, JIS=547, ISO=548, INTERNAL=549, QUARTER=550, 
		MONTH=551, DAY=552, HOUR=553, MINUTE=554, WEEK=555, SECOND=556, MICROSECOND=557, 
		TABLES=558, ROUTINE=559, EXECUTE=560, FILE=561, PROCESS=562, RELOAD=563, 
		SHUTDOWN=564, SUPER=565, PRIVILEGES=566, ARMSCII8=567, ASCII=568, BIG5=569, 
		CP1250=570, CP1251=571, CP1256=572, CP1257=573, CP850=574, CP852=575, 
		CP866=576, CP932=577, DEC8=578, EUCJPMS=579, EUCKR=580, GB2312=581, GBK=582, 
		GEOSTD8=583, GREEK=584, HEBREW=585, HP8=586, KEYBCS2=587, KOI8R=588, KOI8U=589, 
		LATIN1=590, LATIN2=591, LATIN5=592, LATIN7=593, MACCE=594, MACROMAN=595, 
		SJIS=596, SWE7=597, TIS620=598, UCS2=599, UJIS=600, UTF16=601, UTF16LE=602, 
		UTF32=603, UTF8=604, UTF8MB3=605, UTF8MB4=606, ARCHIVE=607, BLACKHOLE=608, 
		CSV=609, FEDERATED=610, INNODB=611, MEMORY=612, MRG_MYISAM=613, MYISAM=614, 
		NDB=615, NDBCLUSTER=616, PERFOMANCE_SCHEMA=617, REPEATABLE=618, COMMITTED=619, 
		UNCOMMITTED=620, SERIALIZABLE=621, GEOMETRYCOLLECTION=622, LINESTRING=623, 
		MULTILINESTRING=624, MULTIPOINT=625, MULTIPOLYGON=626, POINT=627, POLYGON=628, 
		ABS=629, ACOS=630, ADDDATE=631, ADDTIME=632, AES_DECRYPT=633, AES_ENCRYPT=634, 
		AREA=635, ASBINARY=636, ASIN=637, ASTEXT=638, ASWKB=639, ASWKT=640, ASYMMETRIC_DECRYPT=641, 
		ASYMMETRIC_DERIVE=642, ASYMMETRIC_ENCRYPT=643, ASYMMETRIC_SIGN=644, ASYMMETRIC_VERIFY=645, 
		ATAN=646, ATAN2=647, BENCHMARK=648, BIN=649, BIT_COUNT=650, BIT_LENGTH=651, 
		BUFFER=652, CEIL=653, CEILING=654, CENTROID=655, CHARACTER_LENGTH=656, 
		CHARSET=657, CHAR_LENGTH=658, COERCIBILITY=659, COLLATION=660, COMPRESS=661, 
		CONCAT=662, CONCAT_WS=663, CONNECTION_ID=664, CONV=665, CONVERT_TZ=666, 
		COS=667, COT=668, CRC32=669, CREATE_ASYMMETRIC_PRIV_KEY=670, CREATE_ASYMMETRIC_PUB_KEY=671, 
		CREATE_DH_PARAMETERS=672, CREATE_DIGEST=673, CROSSES=674, DATEDIFF=675, 
		DATE_FORMAT=676, DAYNAME=677, DAYOFMONTH=678, DAYOFWEEK=679, DAYOFYEAR=680, 
		DECODE=681, DEGREES=682, DES_DECRYPT=683, DES_ENCRYPT=684, DIMENSION=685, 
		DISJOINT=686, ELT=687, ENCODE=688, ENCRYPT=689, ENDPOINT=690, ENVELOPE=691, 
		EQUALS=692, EXP=693, EXPORT_SET=694, EXTERIORRING=695, EXTRACTVALUE=696, 
		FIELD=697, FIND_IN_SET=698, FLOOR=699, FORMAT=700, FOUND_ROWS=701, FROM_BASE64=702, 
		FROM_DAYS=703, FROM_UNIXTIME=704, GEOMCOLLFROMTEXT=705, GEOMCOLLFROMWKB=706, 
		GEOMETRYCOLLECTIONFROMTEXT=707, GEOMETRYCOLLECTIONFROMWKB=708, GEOMETRYFROMTEXT=709, 
		GEOMETRYFROMWKB=710, GEOMETRYN=711, GEOMETRYTYPE=712, GEOMFROMTEXT=713, 
		GEOMFROMWKB=714, GET_FORMAT=715, GET_LOCK=716, GLENGTH=717, GREATEST=718, 
		GTID_SUBSET=719, GTID_SUBTRACT=720, HEX=721, IFNULL=722, INET6_ATON=723, 
		INET6_NTOA=724, INET_ATON=725, INET_NTOA=726, INSTR=727, INTERIORRINGN=728, 
		INTERSECTS=729, ISCLOSED=730, ISEMPTY=731, ISNULL=732, ISSIMPLE=733, IS_FREE_LOCK=734, 
		IS_IPV4=735, IS_IPV4_COMPAT=736, IS_IPV4_MAPPED=737, IS_IPV6=738, IS_USED_LOCK=739, 
		LAST_INSERT_ID=740, LCASE=741, LEAST=742, LENGTH=743, LINEFROMTEXT=744, 
		LINEFROMWKB=745, LINESTRINGFROMTEXT=746, LINESTRINGFROMWKB=747, LN=748, 
		LOAD_FILE=749, LOCATE=750, LOG=751, LOG10=752, LOG2=753, LOWER=754, LPAD=755, 
		LTRIM=756, MAKEDATE=757, MAKETIME=758, MAKE_SET=759, MASTER_POS_WAIT=760, 
		MBRCONTAINS=761, MBRDISJOINT=762, MBREQUAL=763, MBRINTERSECTS=764, MBROVERLAPS=765, 
		MBRTOUCHES=766, MBRWITHIN=767, MD5=768, MLINEFROMTEXT=769, MLINEFROMWKB=770, 
		MONTHNAME=771, MPOINTFROMTEXT=772, MPOINTFROMWKB=773, MPOLYFROMTEXT=774, 
		MPOLYFROMWKB=775, MULTILINESTRINGFROMTEXT=776, MULTILINESTRINGFROMWKB=777, 
		MULTIPOINTFROMTEXT=778, MULTIPOINTFROMWKB=779, MULTIPOLYGONFROMTEXT=780, 
		MULTIPOLYGONFROMWKB=781, NAME_CONST=782, NULLIF=783, NUMGEOMETRIES=784, 
		NUMINTERIORRINGS=785, NUMPOINTS=786, OCT=787, OCTET_LENGTH=788, ORD=789, 
		OVERLAPS=790, PERIOD_ADD=791, PERIOD_DIFF=792, PI=793, POINTFROMTEXT=794, 
		POINTFROMWKB=795, POINTN=796, POLYFROMTEXT=797, POLYFROMWKB=798, POLYGONFROMTEXT=799, 
		POLYGONFROMWKB=800, POW=801, POWER=802, QUOTE=803, RADIANS=804, RAND=805, 
		RANDOM_BYTES=806, RELEASE_LOCK=807, REVERSE=808, ROUND=809, ROW_COUNT=810, 
		RPAD=811, RTRIM=812, SEC_TO_TIME=813, SESSION_USER=814, SHA=815, SHA1=816, 
		SHA2=817, SIGN=818, SIN=819, SLEEP=820, SOUNDEX=821, SQL_THREAD_WAIT_AFTER_GTIDS=822, 
		SQRT=823, SRID=824, STARTPOINT=825, STRCMP=826, STR_TO_DATE=827, ST_AREA=828, 
		ST_ASBINARY=829, ST_ASTEXT=830, ST_ASWKB=831, ST_ASWKT=832, ST_BUFFER=833, 
		ST_CENTROID=834, ST_CONTAINS=835, ST_CROSSES=836, ST_DIFFERENCE=837, ST_DIMENSION=838, 
		ST_DISJOINT=839, ST_DISTANCE=840, ST_ENDPOINT=841, ST_ENVELOPE=842, ST_EQUALS=843, 
		ST_EXTERIORRING=844, ST_GEOMCOLLFROMTEXT=845, ST_GEOMCOLLFROMTXT=846, 
		ST_GEOMCOLLFROMWKB=847, ST_GEOMETRYCOLLECTIONFROMTEXT=848, ST_GEOMETRYCOLLECTIONFROMWKB=849, 
		ST_GEOMETRYFROMTEXT=850, ST_GEOMETRYFROMWKB=851, ST_GEOMETRYN=852, ST_GEOMETRYTYPE=853, 
		ST_GEOMFROMTEXT=854, ST_GEOMFROMWKB=855, ST_INTERIORRINGN=856, ST_INTERSECTION=857, 
		ST_INTERSECTS=858, ST_ISCLOSED=859, ST_ISEMPTY=860, ST_ISSIMPLE=861, ST_LINEFROMTEXT=862, 
		ST_LINEFROMWKB=863, ST_LINESTRINGFROMTEXT=864, ST_LINESTRINGFROMWKB=865, 
		ST_NUMGEOMETRIES=866, ST_NUMINTERIORRING=867, ST_NUMINTERIORRINGS=868, 
		ST_NUMPOINTS=869, ST_OVERLAPS=870, ST_POINTFROMTEXT=871, ST_POINTFROMWKB=872, 
		ST_POINTN=873, ST_POLYFROMTEXT=874, ST_POLYFROMWKB=875, ST_POLYGONFROMTEXT=876, 
		ST_POLYGONFROMWKB=877, ST_SRID=878, ST_STARTPOINT=879, ST_SYMDIFFERENCE=880, 
		ST_TOUCHES=881, ST_UNION=882, ST_WITHIN=883, ST_X=884, ST_Y=885, SUBDATE=886, 
		SUBSTRING_INDEX=887, SUBTIME=888, SYSTEM_USER=889, TAN=890, TIMEDIFF=891, 
		TIMESTAMPADD=892, TIMESTAMPDIFF=893, TIME_FORMAT=894, TIME_TO_SEC=895, 
		TOUCHES=896, TO_BASE64=897, TO_DAYS=898, TO_SECONDS=899, UCASE=900, UNCOMPRESS=901, 
		UNCOMPRESSED_LENGTH=902, UNHEX=903, UNIX_TIMESTAMP=904, UPDATEXML=905, 
		UPPER=906, UUID=907, UUID_SHORT=908, VALIDATE_PASSWORD_STRENGTH=909, VERSION=910, 
		WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=911, WEEKDAY=912, WEEKOFYEAR=913, WEIGHT_STRING=914, 
		WITHIN=915, YEARWEEK=916, Y_FUNCTION=917, X_FUNCTION=918, VAR_ASSIGN=919, 
		PLUS_ASSIGN=920, MINUS_ASSIGN=921, MULT_ASSIGN=922, DIV_ASSIGN=923, MOD_ASSIGN=924, 
		AND_ASSIGN=925, XOR_ASSIGN=926, OR_ASSIGN=927, STAR=928, DIVIDE=929, MODULE=930, 
		PLUS=931, MINUSMINUS=932, MINUS=933, DIV=934, MOD=935, EQUAL_SYMBOL=936, 
		GREATER_SYMBOL=937, LESS_SYMBOL=938, EXCLAMATION_SYMBOL=939, BIT_NOT_OP=940, 
		BIT_OR_OP=941, BIT_AND_OP=942, BIT_XOR_OP=943, DOT=944, LR_BRACKET=945, 
		RR_BRACKET=946, COMMA=947, SEMI=948, AT_SIGN=949, ZERO_DECIMAL=950, ONE_DECIMAL=951, 
		TWO_DECIMAL=952, SINGLE_QUOTE_SYMB=953, DOUBLE_QUOTE_SYMB=954, REVERSE_QUOTE_SYMB=955, 
		COLON_SYMB=956, CHARSET_REVERSE_QOUTE_STRING=957, FILESIZE_LITERAL=958, 
		START_NATIONAL_STRING_LITERAL=959, STRING_LITERAL=960, DECIMAL_LITERAL=961, 
		HEXADECIMAL_LITERAL=962, REAL_LITERAL=963, NULL_SPEC_LITERAL=964, BIT_STRING=965, 
		STRING_CHARSET_NAME=966, DOT_ID=967, ID=968, REVERSE_QUOTE_ID=969, STRING_USER_NAME=970, 
		LOCAL_ID=971, GLOBAL_ID=972, ERROR_RECONGNIGION=973;
	public static final int
		RULE_sql = 0, RULE_sqlCommand = 1, RULE_use = 2, RULE_createDatabase = 3, 
		RULE_dropDatabase = 4, RULE_createView = 5, RULE_createTable = 6, RULE_createColumn = 7, 
		RULE_columnConstraint = 8, RULE_tableConstraint = 9, RULE_referenceDefinition = 10, 
		RULE_referenceAction = 11, RULE_referenceControlType = 12, RULE_indexColumnDefinition = 13, 
		RULE_indexColumnNames = 14, RULE_indexColumnName = 15, RULE_indexOption = 16, 
		RULE_dropTable = 17, RULE_renameTable = 18, RULE_renameTableClause = 19, 
		RULE_select = 20, RULE_selectModifier = 21, RULE_selectRows = 22, RULE_selectRow = 23, 
		RULE_selectInto = 24, RULE_fromClause = 25, RULE_tableContents = 26, RULE_tableContent = 27, 
		RULE_tableRow = 28, RULE_join = 29, RULE_orderByClause = 30, RULE_limitClause = 31, 
		RULE_orderByExpression = 32, RULE_groupByExpression = 33, RULE_insert = 34, 
		RULE_insertValue = 35, RULE_update = 36, RULE_updateAssignment = 37, RULE_delete = 38, 
		RULE_replace = 39, RULE_expression = 40, RULE_expressions = 41, RULE_predicate = 42, 
		RULE_expressionAtom = 43, RULE_expressionOrDefault = 44, RULE_expressionsOrDefaults = 45, 
		RULE_constant = 46, RULE_stringLiteral = 47, RULE_decimalLiteral = 48, 
		RULE_fileSizeLiteral = 49, RULE_hexadecimalLiteral = 50, RULE_booleanLiteral = 51, 
		RULE_function = 52, RULE_specificFunction = 53, RULE_aggregateFunction = 54, 
		RULE_functionParameter = 55, RULE_functionParameters = 56, RULE_unaryOperator = 57, 
		RULE_comparisonOperator = 58, RULE_logicalOperator = 59, RULE_bitOperator = 60, 
		RULE_mathOperator = 61, RULE_id = 62, RULE_ids = 63, RULE_subId = 64, 
		RULE_idSubId = 65, RULE_defaultValue = 66, RULE_nullOrNotNull = 67, RULE_intervalType = 68, 
		RULE_dataType = 69, RULE_length = 70, RULE_lengthTwoDimension = 71, RULE_lengthTwoDimensionOptional = 72, 
		RULE_ifExists = 73, RULE_ifNotExists = 74;
	public static final String[] ruleNames = {
		"sql", "sqlCommand", "use", "createDatabase", "dropDatabase", "createView", 
		"createTable", "createColumn", "columnConstraint", "tableConstraint", 
		"referenceDefinition", "referenceAction", "referenceControlType", "indexColumnDefinition", 
		"indexColumnNames", "indexColumnName", "indexOption", "dropTable", "renameTable", 
		"renameTableClause", "select", "selectModifier", "selectRows", "selectRow", 
		"selectInto", "fromClause", "tableContents", "tableContent", "tableRow", 
		"join", "orderByClause", "limitClause", "orderByExpression", "groupByExpression", 
		"insert", "insertValue", "update", "updateAssignment", "delete", "replace", 
		"expression", "expressions", "predicate", "expressionAtom", "expressionOrDefault", 
		"expressionsOrDefaults", "constant", "stringLiteral", "decimalLiteral", 
		"fileSizeLiteral", "hexadecimalLiteral", "booleanLiteral", "function", 
		"specificFunction", "aggregateFunction", "functionParameter", "functionParameters", 
		"unaryOperator", "comparisonOperator", "logicalOperator", "bitOperator", 
		"mathOperator", "id", "ids", "subId", "idSubId", "defaultValue", "nullOrNotNull", 
		"intervalType", "dataType", "length", "lengthTwoDimension", "lengthTwoDimensionOptional", 
		"ifExists", "ifNotExists"
	};

	private static final String[] _LITERAL_NAMES = {
		null, null, null, null, null, "'ADD'", "'ALL'", "'ALTER'", "'ANALYZE'", 
		"'AND'", "'AS'", "'ASC'", "'BEFORE'", "'BETWEEN'", "'BOTH'", "'BY'", "'CALL'", 
		"'CASCADE'", "'CASE'", "'CAST'", "'CHANGE'", "'CHARACTER'", "'CHECK'", 
		"'COLLATE'", "'COLUMN'", "'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", 
		"'CONVERT'", "'CREATE'", "'CROSS'", "'CURRENT_USER'", "'CURSOR'", "'DATABASE'", 
		"'DATABASES'", "'DECLARE'", "'DEFAULT'", "'DELAYED'", "'DELETE'", "'DESC'", 
		"'DESCRIBE'", "'DETERMINISTIC'", "'DISTINCT'", "'DISTINCTROW'", "'DROP'", 
		"'EACH'", "'ELSE'", "'ELSEIF'", "'ENCLOSED'", "'ESCAPED'", "'EXISTS'", 
		"'EXIT'", "'EXPLAIN'", "'FALSE'", "'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", 
		"'FROM'", "'FULLTEXT'", "'GRANT'", "'GROUP'", "'HAVING'", "'HIGH_PRIORITY'", 
		"'IF'", "'IGNORE'", "'IN'", "'INDEX'", "'INFILE'", "'INNER'", "'INOUT'", 
		"'INSERT'", "'INTERVAL'", "'INTO'", "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", 
		"'KEYS'", "'KILL'", "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", 
		"'LINEAR'", "'LINES'", "'LOAD'", "'LOCK'", "'LOOP'", "'LOW_PRIORITY'", 
		"'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", "'MATCH'", "'MAXVALUE'", 
		"'MODIFIES'", "'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", "'NULL'", 
		"'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONALLY'", "'OR'", "'ORDER'", "'OUT'", 
		"'OUTER'", "'OUTFILE'", "'PARTITION'", "'PRIMARY'", "'PROCEDURE'", "'PURGE'", 
		"'RANGE'", "'READ'", "'READS'", "'REFERENCES'", "'REGEXP'", "'RELEASE'", 
		"'RENAME'", "'REPEAT'", "'REPLACE'", "'REQUIRE'", "'RESTRICT'", "'RETURN'", 
		"'REVOKE'", "'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", "'SELECT'", 
		"'SET'", "'SEPARATOR'", "'SHOW'", "'SPATIAL'", "'SQL'", "'SQLEXCEPTION'", 
		"'SQLSTATE'", "'SQLWARNING'", "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", 
		"'SQL_SMALL_RESULT'", "'SSL'", "'STARTING'", "'STRAIGHT_JOIN'", "'TABLE'", 
		"'TERMINATED'", "'THEN'", "'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", 
		"'UNDO'", "'UNION'", "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", "'UPDATE'", 
		"'USAGE'", "'USE'", "'USING'", "'VALUES'", "'WHEN'", "'WHERE'", "'WHILE'", 
		"'WITH'", "'WRITE'", "'XOR'", "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", 
		"'MEDIUMINT'", "'INT'", "'INTEGER'", "'BIGINT'", "'REAL'", "'DOUBLE'", 
		"'FLOAT'", "'DECIMAL'", "'NUMERIC'", "'DATE'", "'TIME'", "'TIMESTAMP'", 
		"'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'", "'BINARY'", "'VARBINARY'", 
		"'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONGBLOB'", "'TINYTEXT'", "'TEXT'", 
		"'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'", "'YEAR_MONTH'", "'DAY_HOUR'", 
		"'DAY_MINUTE'", "'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", "'MINUTE_SECOND'", 
		"'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", 
		"'DAY_MICROSECOND'", "'AVG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", 
		"'GROUP_CONCAT'", "'MAX'", "'MIN'", "'STD'", "'STDDEV'", "'STDDEV_POP'", 
		"'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", 
		"'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", "'CURTIME'", 
		"'DATE_ADD'", "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", "'NOW'", 
		"'POSITION'", "'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", "'UTC_DATE'", 
		"'UTC_TIME'", "'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'", 
		"'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", 
		"'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", "'BEGIN'", "'BINLOG'", "'BIT'", 
		"'BLOCK'", "'BOOL'", "'BOOLEAN'", "'BTREE'", "'CACHE'", "'CASCADED'", 
		"'CHAIN'", "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", "'CIPHER'", "'CLIENT'", 
		"'CLOSE'", "'COALESCE'", "'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'", "'COMMENT'", 
		"'COMMIT'", "'COMPACT'", "'COMPLETION'", "'COMPRESSED'", "'COMPRESSION'", 
		"'CONCURRENT'", "'CONNECTION'", "'CONSISTENT'", "'CONTAINS'", "'CONTEXT'", 
		"'CONTRIBUTORS'", "'COPY'", "'CPU'", "'DATA'", "'DATAFILE'", "'DEALLOCATE'", 
		"'DEFAULT_AUTH'", "'DEFINER'", "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", 
		"'DIRECTORY'", "'DISABLE'", "'DISCARD'", "'DISK'", "'DO'", "'DUMPFILE'", 
		"'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", "'ENCRYPTION'", "'END'", "'ENDS'", 
		"'ENGINE'", "'ENGINES'", "'ERROR'", "'ERRORS'", "'ESCAPE'", "'EVEN'", 
		"'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", "'EXCLUSIVE'", "'EXPIRE'", 
		"'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", "'FAST'", "'FAULTS'", "'FIELDS'", 
		"'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'", "'FIXED'", "'FLUSH'", "'FOLLOWS'", 
		"'FOUND'", "'FULL'", "'FUNCTION'", "'GENERAL'", "'GLOBAL'", "'GRANTS'", 
		"'GROUP_REPLICATION'", "'HANDLER'", "'HASH'", "'HELP'", "'HOST'", "'HOSTS'", 
		"'IDENTIFIED'", "'IGNORE_SERVER_IDS'", "'IMPORT'", "'INDEXES'", "'INITIAL_SIZE'", 
		"'INPLACE'", "'INSERT_METHOD'", "'INSTALL'", "'INSTANCE'", "'INVOKER'", 
		"'IO'", "'IO_THREAD'", "'IPC'", "'ISOLATION'", "'ISSUER'", "'JSON'", "'KEY_BLOCK_SIZE'", 
		"'LANGUAGE'", "'LAST'", "'LEAVES'", "'LESS'", "'LEVEL'", "'LIST'", "'LOCAL'", 
		"'LOGFILE'", "'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'", 
		"'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", "'MASTER_LOG_FILE'", 
		"'MASTER_LOG_POS'", "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", 
		"'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", 
		"'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", 
		"'MASTER_TLS_VERSION'", "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", 
		"'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", 
		"'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MERGE'", "'MID'", "'MIGRATE'", 
		"'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", "'MYSQL'", "'NAME'", "'NAMES'", 
		"'NCHAR'", "'NEVER'", "'NEXT'", "'NO'", "'NODEGROUP'", "'NONE'", "'OFFLINE'", 
		"'OFFSET'", "'OJ'", "'OLD_PASSWORD'", "'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", 
		"'OPTIMIZER_COSTS'", "'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'", 
		"'PARSER'", "'PARTIAL'", "'PARTITIONING'", "'PARTITIONS'", "'PASSWORD'", 
		"'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", "'PRECEDES'", 
		"'PREPARE'", "'PRESERVE'", "'PREV'", "'PROCESSLIST'", "'PROFILE'", "'PROFILES'", 
		"'PROXY'", "'QUERY'", "'QUICK'", "'REBUILD'", "'RECOVER'", "'REDO_BUFFER_SIZE'", 
		"'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", "'RELAY_LOG_POS'", "'RELAYLOG'", 
		"'REMOVE'", "'REORGANIZE'", "'REPAIR'", "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", 
		"'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", 
		"'REPLICATE_WILD_DO_TABLE'", "'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", 
		"'RESET'", "'RESUME'", "'RETURNS'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", 
		"'ROW'", "'ROWS'", "'ROW_FORMAT'", "'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", 
		"'SERVER'", "'SESSION'", "'SHARE'", "'SHARED'", "'SIGNED'", "'SIMPLE'", 
		"'SLAVE'", "'SLOW'", "'SNAPSHOT'", "'SOCKET'", "'SOME'", "'SONAME'", "'SOUNDS'", 
		"'SOURCE'", "'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", 
		"'SQL_BUFFER_RESULT'", "'SQL_CACHE'", "'SQL_NO_CACHE'", "'SQL_THREAD'", 
		"'START'", "'STARTS'", "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'", 
		"'STATUS'", "'STOP'", "'STORAGE'", "'STRING'", "'SUBJECT'", "'SUBPARTITION'", 
		"'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'", "'SWITCHES'", "'TABLESPACE'", 
		"'TEMPORARY'", "'TEMPTABLE'", "'THAN'", "'TRADITIONAL'", "'TRANSACTION'", 
		"'TRIGGERS'", "'TRUNCATE'", "'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", 
		"'UNINSTALL'", "'UNKNOWN'", "'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'", 
		"'USER_RESOURCES'", "'VALIDATION'", "'VALUE'", "'VARIABLES'", "'VIEW'", 
		"'WAIT'", "'WARNINGS'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", 
		"'XA'", "'XML'", "'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", "'QUARTER'", 
		"'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", "'MICROSECOND'", 
		"'TABLES'", "'ROUTINE'", "'EXECUTE'", "'FILE'", "'PROCESS'", "'RELOAD'", 
		"'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", "'ARMSCII8'", "'ASCII'", "'BIG5'", 
		"'CP1250'", "'CP1251'", "'CP1256'", "'CP1257'", "'CP850'", "'CP852'", 
		"'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", "'EUCKR'", "'GB2312'", "'GBK'", 
		"'GEOSTD8'", "'GREEK'", "'HEBREW'", "'HP8'", "'KEYBCS2'", "'KOI8R'", "'KOI8U'", 
		"'LATIN1'", "'LATIN2'", "'LATIN5'", "'LATIN7'", "'MACCE'", "'MACROMAN'", 
		"'SJIS'", "'SWE7'", "'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", "'UTF16LE'", 
		"'UTF32'", "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", "'BLACKHOLE'", 
		"'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", "'MRG_MYISAM'", "'MYISAM'", 
		"'NDB'", "'NDBCLUSTER'", "'PERFOMANCE_SCHEMA'", "'REPEATABLE'", "'COMMITTED'", 
		"'UNCOMMITTED'", "'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", "'LINESTRING'", 
		"'MULTILINESTRING'", "'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", 
		"'ABS'", "'ACOS'", "'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", "'AES_ENCRYPT'", 
		"'AREA'", "'ASBINARY'", "'ASIN'", "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", 
		"'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", 
		"'ATAN'", "'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", 
		"'BUFFER'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
		"'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", 
		"'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
		"'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
		"'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
		"'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
		"'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
		"'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENVELOPE'", 
		"'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'", 
		"'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'", 
		"'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'", 
		"'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", 
		"'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", "'GEOMFROMTEXT'", 
		"'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", 
		"'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'", 
		"'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", "'INTERIORRINGN'", 
		"'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", "'ISSIMPLE'", "'IS_FREE_LOCK'", 
		"'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", "'IS_IPV6'", "'IS_USED_LOCK'", 
		"'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", "'LENGTH'", "'LINEFROMTEXT'", 
		"'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", "'LINESTRINGFROMWKB'", "'LN'", 
		"'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", "'LOG2'", "'LOWER'", "'LPAD'", 
		"'LTRIM'", "'MAKEDATE'", "'MAKETIME'", "'MAKE_SET'", "'MASTER_POS_WAIT'", 
		"'MBRCONTAINS'", "'MBRDISJOINT'", "'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", 
		"'MBRTOUCHES'", "'MBRWITHIN'", "'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", 
		"'MONTHNAME'", "'MPOINTFROMTEXT'", "'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", 
		"'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", "'MULTILINESTRINGFROMWKB'", 
		"'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", "'MULTIPOLYGONFROMTEXT'", 
		"'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", "'NUMGEOMETRIES'", 
		"'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", "'ORD'", 
		"'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
		"'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
		"'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
		"'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
		"'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SESSION_USER'", "'SHA'", "'SHA1'", 
		"'SHA2'", "'SIGN'", "'SIN'", "'SLEEP'", "'SOUNDEX'", "'SQL_THREAD_WAIT_AFTER_GTIDS'", 
		"'SQRT'", "'SRID'", "'STARTPOINT'", "'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", 
		"'ST_ASBINARY'", "'ST_ASTEXT'", "'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", 
		"'ST_CENTROID'", "'ST_CONTAINS'", "'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", 
		"'ST_DISJOINT'", "'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", 
		"'ST_EXTERIORRING'", "'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", 
		"'ST_GEOMCOLLFROMWKB'", "'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
		"'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", 
		"'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", 
		"'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'", 
		"'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
		"'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
		"'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", 
		"'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", 
		"'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
		"'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", 
		"'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", 
		"'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
		"'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'", 
		"'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", 
		"'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", "'VERSION'", 
		"'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", "'WEIGHT_STRING'", 
		"'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "':='", "'+='", "'-='", "'*='", 
		"'/='", "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", "'%'", "'+'", "'--'", 
		"'-'", "'DIV'", "'MOD'", "'='", "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", 
		"'^'", "'.'", "'('", "')'", "','", "';'", "'@'", "'0'", "'1'", "'2'", 
		"'''", "'\"'", "'`'", "':'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
		"ADD", "ALL", "ALTER", "ANALYZE", "AND", "AS", "ASC", "BEFORE", "BETWEEN", 
		"BOTH", "BY", "CALL", "CASCADE", "CASE", "CAST", "CHANGE", "CHARACTER", 
		"CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", "CONTINUE", "CONVERT", 
		"CREATE", "CROSS", "CURRENT_USER", "CURSOR", "DATABASE", "DATABASES", 
		"DECLARE", "DEFAULT", "DELAYED", "DELETE", "DESC", "DESCRIBE", "DETERMINISTIC", 
		"DISTINCT", "DISTINCTROW", "DROP", "EACH", "ELSE", "ELSEIF", "ENCLOSED", 
		"ESCAPED", "EXISTS", "EXIT", "EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", 
		"FOREIGN", "FROM", "FULLTEXT", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", 
		"IF", "IGNORE", "IN", "INDEX", "INFILE", "INNER", "INOUT", "INSERT", "INTERVAL", 
		"INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", "KILL", "LEADING", "LEAVE", 
		"LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", "LOAD", "LOCK", "LOOP", "LOW_PRIORITY", 
		"MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", "MATCH", "MAXVALUE", "MODIFIES", 
		"NATURAL", "NOT", "NO_WRITE_TO_BINLOG", "NULL_LITERAL", "ON", "OPTIMIZE", 
		"OPTION", "OPTIONALLY", "OR", "ORDER", "OUT", "OUTER", "OUTFILE", "PARTITION", 
		"PRIMARY", "PROCEDURE", "PURGE", "RANGE", "READ", "READS", "REFERENCES", 
		"REGEXP", "RELEASE", "RENAME", "REPEAT", "REPLACE", "REQUIRE", "RESTRICT", 
		"RETURN", "REVOKE", "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", "SELECT", "SET", 
		"SEPARATOR", "SHOW", "SPATIAL", "SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", 
		"SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", "SSL", "STARTING", 
		"STRAIGHT_JOIN", "TABLE", "TERMINATED", "THEN", "TO", "TRAILING", "TRIGGER", 
		"TRUE", "UNDO", "UNION", "UNIQUE", "UNLOCK", "UNSIGNED", "UPDATE", "USAGE", 
		"USE", "USING", "VALUES", "WHEN", "WHERE", "WHILE", "WITH", "WRITE", "XOR", 
		"ZEROFILL", "TINYINT", "SMALLINT", "MEDIUMINT", "INT", "INTEGER", "BIGINT", 
		"REAL", "DOUBLE", "FLOAT", "DECIMAL", "NUMERIC", "DATE", "TIME", "TIMESTAMP", 
		"DATETIME", "YEAR", "CHAR", "VARCHAR", "BINARY", "VARBINARY", "TINYBLOB", 
		"BLOB", "MEDIUMBLOB", "LONGBLOB", "TINYTEXT", "TEXT", "MEDIUMTEXT", "LONGTEXT", 
		"ENUM", "YEAR_MONTH", "DAY_HOUR", "DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", 
		"HOUR_SECOND", "MINUTE_SECOND", "SECOND_MICROSECOND", "MINUTE_MICROSECOND", 
		"HOUR_MICROSECOND", "DAY_MICROSECOND", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", 
		"COUNT", "GROUP_CONCAT", "MAX", "MIN", "STD", "STDDEV", "STDDEV_POP", 
		"STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", "VARIANCE", "CURRENT_DATE", 
		"CURRENT_TIME", "CURRENT_TIMESTAMP", "LOCALTIME", "CURDATE", "CURTIME", 
		"DATE_ADD", "DATE_SUB", "EXTRACT", "LOCALTIMESTAMP", "NOW", "POSITION", 
		"SUBSTR", "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", 
		"ACCOUNT", "ACTION", "AFTER", "AGGREGATE", "ALGORITHM", "ANY", "AT", "AUTHORS", 
		"AUTOCOMMIT", "AUTOEXTEND_SIZE", "AUTO_INCREMENT", "AVG_ROW_LENGTH", "BEGIN", 
		"BINLOG", "BIT", "BLOCK", "BOOL", "BOOLEAN", "BTREE", "CACHE", "CASCADED", 
		"CHAIN", "CHANGED", "CHANNEL", "CHECKSUM", "CIPHER", "CLIENT", "CLOSE", 
		"COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", "COMMENT", "COMMIT", "COMPACT", 
		"COMPLETION", "COMPRESSED", "COMPRESSION", "CONCURRENT", "CONNECTION", 
		"CONSISTENT", "CONTAINS", "CONTEXT", "CONTRIBUTORS", "COPY", "CPU", "DATA", 
		"DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", "DEFINER", "DELAY_KEY_WRITE", 
		"DES_KEY_FILE", "DIRECTORY", "DISABLE", "DISCARD", "DISK", "DO", "DUMPFILE", 
		"DUPLICATE", "DYNAMIC", "ENABLE", "ENCRYPTION", "END", "ENDS", "ENGINE", 
		"ENGINES", "ERROR", "ERRORS", "ESCAPE", "EVEN", "EVENT", "EVENTS", "EVERY", 
		"EXCHANGE", "EXCLUSIVE", "EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", 
		"FAST", "FAULTS", "FIELDS", "FILE_BLOCK_SIZE", "FILTER", "FIRST", "FIXED", 
		"FLUSH", "FOLLOWS", "FOUND", "FULL", "FUNCTION", "GENERAL", "GLOBAL", 
		"GRANTS", "GROUP_REPLICATION", "HANDLER", "HASH", "HELP", "HOST", "HOSTS", 
		"IDENTIFIED", "IGNORE_SERVER_IDS", "IMPORT", "INDEXES", "INITIAL_SIZE", 
		"INPLACE", "INSERT_METHOD", "INSTALL", "INSTANCE", "INVOKER", "IO", "IO_THREAD", 
		"IPC", "ISOLATION", "ISSUER", "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", 
		"LEAVES", "LESS", "LEVEL", "LIST", "LOCAL", "LOGFILE", "LOGS", "MASTER", 
		"MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", 
		"MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", "MASTER_PASSWORD", 
		"MASTER_PORT", "MASTER_RETRY_COUNT", "MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH", 
		"MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", 
		"MASTER_SSL_KEY", "MASTER_TLS_VERSION", "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", 
		"MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", 
		"MAX_USER_CONNECTIONS", "MEDIUM", "MERGE", "MID", "MIGRATE", "MIN_ROWS", 
		"MODE", "MODIFY", "MUTEX", "MYSQL", "NAME", "NAMES", "NCHAR", "NEVER", 
		"NEXT", "NO", "NODEGROUP", "NONE", "OFFLINE", "OFFSET", "OJ", "OLD_PASSWORD", 
		"ONE", "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", "OPTIONS", "OWNER", 
		"PACK_KEYS", "PAGE", "PARSER", "PARTIAL", "PARTITIONING", "PARTITIONS", 
		"PASSWORD", "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES", 
		"PREPARE", "PRESERVE", "PREV", "PROCESSLIST", "PROFILE", "PROFILES", "PROXY", 
		"QUERY", "QUICK", "REBUILD", "RECOVER", "REDO_BUFFER_SIZE", "REDUNDANT", 
		"RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", "RELAYLOG", "REMOVE", "REORGANIZE", 
		"REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", 
		"REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", 
		"REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", "RESET", "RESUME", "RETURNS", 
		"ROLLBACK", "ROLLUP", "ROTATE", "ROW", "ROWS", "ROW_FORMAT", "SAVEPOINT", 
		"SCHEDULE", "SECURITY", "SERVER", "SESSION", "SHARE", "SHARED", "SIGNED", 
		"SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", "SOME", "SONAME", "SOUNDS", 
		"SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", 
		"SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", "SQL_THREAD", "START", 
		"STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", 
		"STATUS", "STOP", "STORAGE", "STRING", "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", 
		"SUSPEND", "SWAPS", "SWITCHES", "TABLESPACE", "TEMPORARY", "TEMPTABLE", 
		"THAN", "TRADITIONAL", "TRANSACTION", "TRIGGERS", "TRUNCATE", "UNDEFINED", 
		"UNDOFILE", "UNDO_BUFFER_SIZE", "UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE", 
		"USER", "USE_FRM", "USER_RESOURCES", "VALIDATION", "VALUE", "VARIABLES", 
		"VIEW", "WAIT", "WARNINGS", "WITHOUT", "WORK", "WRAPPER", "X509", "XA", 
		"XML", "EUR", "USA", "JIS", "ISO", "INTERNAL", "QUARTER", "MONTH", "DAY", 
		"HOUR", "MINUTE", "WEEK", "SECOND", "MICROSECOND", "TABLES", "ROUTINE", 
		"EXECUTE", "FILE", "PROCESS", "RELOAD", "SHUTDOWN", "SUPER", "PRIVILEGES", 
		"ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", "CP1256", "CP1257", "CP850", 
		"CP852", "CP866", "CP932", "DEC8", "EUCJPMS", "EUCKR", "GB2312", "GBK", 
		"GEOSTD8", "GREEK", "HEBREW", "HP8", "KEYBCS2", "KOI8R", "KOI8U", "LATIN1", 
		"LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", "SJIS", "SWE7", "TIS620", 
		"UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", "UTF8", "UTF8MB3", "UTF8MB4", 
		"ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", "INNODB", "MEMORY", "MRG_MYISAM", 
		"MYISAM", "NDB", "NDBCLUSTER", "PERFOMANCE_SCHEMA", "REPEATABLE", "COMMITTED", 
		"UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", "LINESTRING", "MULTILINESTRING", 
		"MULTIPOINT", "MULTIPOLYGON", "POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", 
		"ADDTIME", "AES_DECRYPT", "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", 
		"ASWKB", "ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", 
		"ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", 
		"BIN", "BIT_COUNT", "BIT_LENGTH", "BUFFER", "CEIL", "CEILING", "CENTROID", 
		"CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", "COLLATION", 
		"COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", "CONVERT_TZ", 
		"COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", 
		"CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
		"DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", 
		"DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE", 
		"ENCRYPT", "ENDPOINT", "ENVELOPE", "EQUALS", "EXP", "EXPORT_SET", "EXTERIORRING", 
		"EXTRACTVALUE", "FIELD", "FIND_IN_SET", "FLOOR", "FORMAT", "FOUND_ROWS", 
		"FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", "GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", 
		"GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT", 
		"GEOMETRYFROMWKB", "GEOMETRYN", "GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", 
		"GET_FORMAT", "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT", 
		"HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", "INET_ATON", "INET_NTOA", 
		"INSTR", "INTERIORRINGN", "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", 
		"ISSIMPLE", "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
		"IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", 
		"LINEFROMTEXT", "LINEFROMWKB", "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", 
		"LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
		"LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", 
		"MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", 
		"MBRWITHIN", "MD5", "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", 
		"MPOINTFROMWKB", "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
		"MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT", 
		"MULTIPOLYGONFROMWKB", "NAME_CONST", "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", 
		"NUMPOINTS", "OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", 
		"PI", "POINTFROMTEXT", "POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", 
		"POLYGONFROMTEXT", "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
		"RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", 
		"RPAD", "RTRIM", "SEC_TO_TIME", "SESSION_USER", "SHA", "SHA1", "SHA2", 
		"SIGN", "SIN", "SLEEP", "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", 
		"SRID", "STARTPOINT", "STRCMP", "STR_TO_DATE", "ST_AREA", "ST_ASBINARY", 
		"ST_ASTEXT", "ST_ASWKB", "ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", 
		"ST_CROSSES", "ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", 
		"ST_ENDPOINT", "ST_ENVELOPE", "ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", 
		"ST_GEOMCOLLFROMTXT", "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", 
		"ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", 
		"ST_GEOMETRYN", "ST_GEOMETRYTYPE", "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", 
		"ST_INTERIORRINGN", "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED", 
		"ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", 
		"ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", 
		"ST_NUMPOINTS", "ST_OVERLAPS", "ST_POINTFROMTEXT", "ST_POINTFROMWKB", 
		"ST_POINTN", "ST_POLYFROMTEXT", "ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", 
		"ST_POLYGONFROMWKB", "ST_SRID", "ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", 
		"ST_UNION", "ST_WITHIN", "ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", 
		"SUBTIME", "SYSTEM_USER", "TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", 
		"TIME_FORMAT", "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", 
		"UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", 
		"UPDATEXML", "UPPER", "UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", 
		"VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR", 
		"WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", "X_FUNCTION", "VAR_ASSIGN", 
		"PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
		"AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", "PLUS", 
		"MINUSMINUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL", 
		"LESS_SYMBOL", "EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", 
		"BIT_XOR_OP", "DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", 
		"ZERO_DECIMAL", "ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", 
		"REVERSE_QUOTE_SYMB", "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", 
		"START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", "DECIMAL_LITERAL", 
		"HEXADECIMAL_LITERAL", "REAL_LITERAL", "NULL_SPEC_LITERAL", "BIT_STRING", 
		"STRING_CHARSET_NAME", "DOT_ID", "ID", "REVERSE_QUOTE_ID", "STRING_USER_NAME", 
		"LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "MySqlParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public MySqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class SqlContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(MySqlParser.EOF, 0); }
		public List<SqlCommandContext> sqlCommand() {
			return getRuleContexts(SqlCommandContext.class);
		}
		public SqlCommandContext sqlCommand(int i) {
			return getRuleContext(SqlCommandContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(MySqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(MySqlParser.SEMI, i);
		}
		public SqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSql(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSql(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlContext sql() throws RecognitionException {
		SqlContext _localctx = new SqlContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_sql);

		        // System.out.println("[Rule: sqlCommand]");
		    
		int _la;
		try {
			setState(166);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(155);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 29)) & ~0x3f) == 0 && ((1L << (_la - 29)) & ((1L << (CREATE - 29)) | (1L << (DELETE - 29)) | (1L << (DROP - 29)) | (1L << (INSERT - 29)))) != 0) || ((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & ((1L << (RENAME - 119)) | (1L << (REPLACE - 119)) | (1L << (SELECT - 119)) | (1L << (UPDATE - 119)) | (1L << (USE - 119)))) != 0)) {
					{
					{
					setState(150);
					sqlCommand();
					setState(151);
					match(SEMI);
					}
					}
					setState(157);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(158);
				match(EOF);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(162);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==SEMI) {
					{
					{
					setState(159);
					match(SEMI);
					}
					}
					setState(164);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(165);
				match(EOF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlCommandContext extends ParserRuleContext {
		public UseContext use() {
			return getRuleContext(UseContext.class,0);
		}
		public CreateDatabaseContext createDatabase() {
			return getRuleContext(CreateDatabaseContext.class,0);
		}
		public DropDatabaseContext dropDatabase() {
			return getRuleContext(DropDatabaseContext.class,0);
		}
		public CreateViewContext createView() {
			return getRuleContext(CreateViewContext.class,0);
		}
		public CreateTableContext createTable() {
			return getRuleContext(CreateTableContext.class,0);
		}
		public DropTableContext dropTable() {
			return getRuleContext(DropTableContext.class,0);
		}
		public RenameTableContext renameTable() {
			return getRuleContext(RenameTableContext.class,0);
		}
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public InsertContext insert() {
			return getRuleContext(InsertContext.class,0);
		}
		public UpdateContext update() {
			return getRuleContext(UpdateContext.class,0);
		}
		public DeleteContext delete() {
			return getRuleContext(DeleteContext.class,0);
		}
		public ReplaceContext replace() {
			return getRuleContext(ReplaceContext.class,0);
		}
		public SqlCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlCommand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSqlCommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSqlCommand(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSqlCommand(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlCommandContext sqlCommand() throws RecognitionException {
		SqlCommandContext _localctx = new SqlCommandContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_sqlCommand);

		        // System.out.println("[Rule: sql]");
		    
		try {
			setState(180);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(168);
				use();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(169);
				createDatabase();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(170);
				dropDatabase();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(171);
				createView();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(172);
				createTable();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(173);
				dropTable();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(174);
				renameTable();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(175);
				select();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(176);
				insert();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(177);
				update();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(178);
				delete();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(179);
				replace();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UseContext extends ParserRuleContext {
		public IdContext database;
		public TerminalNode USE() { return getToken(MySqlParser.USE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public UseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_use; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUse(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUse(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUse(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UseContext use() throws RecognitionException {
		UseContext _localctx = new UseContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_use);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(182);
			match(USE);
			setState(183);
			((UseContext)_localctx).database = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseContext createDatabase() throws RecognitionException {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_createDatabase);

		        // System.out.println("[Rule: createDatabase]");
		    
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(185);
			match(CREATE);
			setState(186);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(188);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(187);
				ifNotExists();
				}
			}

			setState(190);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropDatabaseContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropDatabaseContext dropDatabase() throws RecognitionException {
		DropDatabaseContext _localctx = new DropDatabaseContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_dropDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(192);
			match(DROP);
			setState(193);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(195);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(194);
				ifExists();
				}
			}

			setState(197);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateViewContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public TerminalNode OR() { return getToken(MySqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public IdsContext ids() {
			return getRuleContext(IdsContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public TerminalNode CASCADED() { return getToken(MySqlParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public CreateViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateViewContext createView() throws RecognitionException {
		CreateViewContext _localctx = new CreateViewContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_createView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(199);
			match(CREATE);
			setState(202);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(200);
				match(OR);
				setState(201);
				match(REPLACE);
				}
			}

			setState(204);
			match(VIEW);
			setState(205);
			id();
			setState(210);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(206);
				match(LR_BRACKET);
				setState(207);
				ids();
				setState(208);
				match(RR_BRACKET);
				}
			}

			setState(212);
			match(AS);
			setState(213);
			select();
			setState(220);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(214);
				match(WITH);
				setState(216);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(215);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(218);
				match(CHECK);
				setState(219);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public List<CreateColumnContext> createColumn() {
			return getRuleContexts(CreateColumnContext.class);
		}
		public CreateColumnContext createColumn(int i) {
			return getRuleContext(CreateColumnContext.class,i);
		}
		public CreateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableContext createTable() throws RecognitionException {
		CreateTableContext _localctx = new CreateTableContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_createTable);
		int _la;
		try {
			setState(255);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(222);
				match(CREATE);
				setState(224);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(223);
					match(TEMPORARY);
					}
				}

				setState(226);
				match(TABLE);
				setState(228);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(227);
					ifNotExists();
					}
				}

				setState(230);
				id();
				setState(233);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE) {
					{
					setState(231);
					match(LIKE);
					setState(232);
					id();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(235);
				match(CREATE);
				setState(237);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(236);
					match(TEMPORARY);
					}
				}

				setState(239);
				match(TABLE);
				setState(241);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(240);
					ifNotExists();
					}
				}

				setState(243);
				id();
				setState(244);
				match(LR_BRACKET);
				setState(245);
				createColumn();
				setState(250);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(246);
					match(COMMA);
					setState(247);
					createColumn();
					}
					}
					setState(252);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(253);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateColumnContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public List<ColumnConstraintContext> columnConstraint() {
			return getRuleContexts(ColumnConstraintContext.class);
		}
		public ColumnConstraintContext columnConstraint(int i) {
			return getRuleContext(ColumnConstraintContext.class,i);
		}
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public IndexColumnDefinitionContext indexColumnDefinition() {
			return getRuleContext(IndexColumnDefinitionContext.class,0);
		}
		public CreateColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createColumn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateColumnContext createColumn() throws RecognitionException {
		CreateColumnContext _localctx = new CreateColumnContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_createColumn);
		int _la;
		try {
			setState(267);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
			case TINYINT:
			case SMALLINT:
			case MEDIUMINT:
			case INT:
			case INTEGER:
			case BIGINT:
			case REAL:
			case DOUBLE:
			case FLOAT:
			case DECIMAL:
			case NUMERIC:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case CHAR:
			case VARCHAR:
			case BINARY:
			case VARBINARY:
			case TINYBLOB:
			case BLOB:
			case MEDIUMBLOB:
			case LONGBLOB:
			case TINYTEXT:
			case TEXT:
			case MEDIUMTEXT:
			case LONGTEXT:
			case ENUM:
			case BIT:
			case BOOL:
			case BOOLEAN:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(257);
				id();
				setState(258);
				dataType();
				setState(262);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 36)) & ~0x3f) == 0 && ((1L << (_la - 36)) & ((1L << (DEFAULT - 36)) | (1L << (KEY - 36)) | (1L << (NOT - 36)) | (1L << (NULL_LITERAL - 36)))) != 0) || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (PRIMARY - 110)) | (1L << (REFERENCES - 110)) | (1L << (UNIQUE - 110)))) != 0) || _la==AUTO_INCREMENT || _la==COMMENT) {
					{
					{
					setState(259);
					columnConstraint();
					}
					}
					setState(264);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(265);
				tableConstraint();
				}
				break;
			case FULLTEXT:
			case INDEX:
			case KEY:
			case SPATIAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(266);
				indexColumnDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnConstraintContext extends ParserRuleContext {
		public NullOrNotNullContext nullOrNotNull() {
			return getRuleContext(NullOrNotNullContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintContext columnConstraint() throws RecognitionException {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_columnConstraint);
		int _la;
		try {
			setState(284);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
			case NULL_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(269);
				nullOrNotNull();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(270);
				match(DEFAULT);
				setState(271);
				defaultValue();
				}
				break;
			case AUTO_INCREMENT:
				enterOuterAlt(_localctx, 3);
				{
				setState(272);
				match(AUTO_INCREMENT);
				}
				break;
			case KEY:
			case PRIMARY:
				enterOuterAlt(_localctx, 4);
				{
				setState(274);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY) {
					{
					setState(273);
					match(PRIMARY);
					}
				}

				setState(276);
				match(KEY);
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 5);
				{
				setState(277);
				match(UNIQUE);
				setState(279);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,20,_ctx) ) {
				case 1:
					{
					setState(278);
					match(KEY);
					}
					break;
				}
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 6);
				{
				setState(281);
				match(COMMENT);
				setState(282);
				match(STRING_LITERAL);
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 7);
				{
				setState(283);
				referenceDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintContext extends ParserRuleContext {
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TableConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintContext tableConstraint() throws RecognitionException {
		TableConstraintContext _localctx = new TableConstraintContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_tableConstraint);
		int _la;
		try {
			setState(346);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(290);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(286);
					match(CONSTRAINT);
					setState(288);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (SET - 131)) | (1L << (TINYINT - 131)) | (1L << (SMALLINT - 131)) | (1L << (MEDIUMINT - 131)) | (1L << (INT - 131)) | (1L << (INTEGER - 131)) | (1L << (BIGINT - 131)) | (1L << (REAL - 131)) | (1L << (DOUBLE - 131)) | (1L << (FLOAT - 131)) | (1L << (DECIMAL - 131)) | (1L << (NUMERIC - 131)) | (1L << (DATE - 131)) | (1L << (TIME - 131)) | (1L << (TIMESTAMP - 131)) | (1L << (DATETIME - 131)) | (1L << (YEAR - 131)) | (1L << (CHAR - 131)) | (1L << (VARCHAR - 131)) | (1L << (BINARY - 131)) | (1L << (VARBINARY - 131)) | (1L << (TINYBLOB - 131)) | (1L << (BLOB - 131)) | (1L << (MEDIUMBLOB - 131)) | (1L << (LONGBLOB - 131)) | (1L << (TINYTEXT - 131)) | (1L << (TEXT - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (MEDIUMTEXT - 195)) | (1L << (LONGTEXT - 195)) | (1L << (ENUM - 195)) | (1L << (BIT - 195)))) != 0) || _la==BOOL || _la==BOOLEAN || ((((_la - 551)) & ~0x3f) == 0 && ((1L << (_la - 551)) & ((1L << (MONTH - 551)) | (1L << (DAY - 551)) | (1L << (HOUR - 551)) | (1L << (MINUTE - 551)) | (1L << (WEEK - 551)) | (1L << (SECOND - 551)) | (1L << (MICROSECOND - 551)))) != 0) || _la==ID) {
						{
						setState(287);
						id();
						}
					}

					}
				}

				setState(292);
				match(PRIMARY);
				setState(293);
				match(KEY);
				setState(295);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(294);
					match(USING);
					}
				}

				setState(297);
				indexColumnNames();
				setState(301);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					setState(298);
					indexOption();
					}
					}
					setState(303);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(308);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(304);
					match(CONSTRAINT);
					setState(306);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (SET - 131)) | (1L << (TINYINT - 131)) | (1L << (SMALLINT - 131)) | (1L << (MEDIUMINT - 131)) | (1L << (INT - 131)) | (1L << (INTEGER - 131)) | (1L << (BIGINT - 131)) | (1L << (REAL - 131)) | (1L << (DOUBLE - 131)) | (1L << (FLOAT - 131)) | (1L << (DECIMAL - 131)) | (1L << (NUMERIC - 131)) | (1L << (DATE - 131)) | (1L << (TIME - 131)) | (1L << (TIMESTAMP - 131)) | (1L << (DATETIME - 131)) | (1L << (YEAR - 131)) | (1L << (CHAR - 131)) | (1L << (VARCHAR - 131)) | (1L << (BINARY - 131)) | (1L << (VARBINARY - 131)) | (1L << (TINYBLOB - 131)) | (1L << (BLOB - 131)) | (1L << (MEDIUMBLOB - 131)) | (1L << (LONGBLOB - 131)) | (1L << (TINYTEXT - 131)) | (1L << (TEXT - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (MEDIUMTEXT - 195)) | (1L << (LONGTEXT - 195)) | (1L << (ENUM - 195)) | (1L << (BIT - 195)))) != 0) || _la==BOOL || _la==BOOLEAN || ((((_la - 551)) & ~0x3f) == 0 && ((1L << (_la - 551)) & ((1L << (MONTH - 551)) | (1L << (DAY - 551)) | (1L << (HOUR - 551)) | (1L << (MINUTE - 551)) | (1L << (WEEK - 551)) | (1L << (SECOND - 551)) | (1L << (MICROSECOND - 551)))) != 0) || _la==ID) {
						{
						setState(305);
						id();
						}
					}

					}
				}

				setState(310);
				match(UNIQUE);
				setState(312);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(311);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(315);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (SET - 131)) | (1L << (TINYINT - 131)) | (1L << (SMALLINT - 131)) | (1L << (MEDIUMINT - 131)) | (1L << (INT - 131)) | (1L << (INTEGER - 131)) | (1L << (BIGINT - 131)) | (1L << (REAL - 131)) | (1L << (DOUBLE - 131)) | (1L << (FLOAT - 131)) | (1L << (DECIMAL - 131)) | (1L << (NUMERIC - 131)) | (1L << (DATE - 131)) | (1L << (TIME - 131)) | (1L << (TIMESTAMP - 131)) | (1L << (DATETIME - 131)) | (1L << (YEAR - 131)) | (1L << (CHAR - 131)) | (1L << (VARCHAR - 131)) | (1L << (BINARY - 131)) | (1L << (VARBINARY - 131)) | (1L << (TINYBLOB - 131)) | (1L << (BLOB - 131)) | (1L << (MEDIUMBLOB - 131)) | (1L << (LONGBLOB - 131)) | (1L << (TINYTEXT - 131)) | (1L << (TEXT - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (MEDIUMTEXT - 195)) | (1L << (LONGTEXT - 195)) | (1L << (ENUM - 195)) | (1L << (BIT - 195)))) != 0) || _la==BOOL || _la==BOOLEAN || ((((_la - 551)) & ~0x3f) == 0 && ((1L << (_la - 551)) & ((1L << (MONTH - 551)) | (1L << (DAY - 551)) | (1L << (HOUR - 551)) | (1L << (MINUTE - 551)) | (1L << (WEEK - 551)) | (1L << (SECOND - 551)) | (1L << (MICROSECOND - 551)))) != 0) || _la==ID) {
					{
					setState(314);
					id();
					}
				}

				setState(318);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(317);
					match(USING);
					}
				}

				setState(320);
				indexColumnNames();
				setState(324);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					setState(321);
					indexOption();
					}
					}
					setState(326);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(331);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(327);
					match(CONSTRAINT);
					setState(329);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (SET - 131)) | (1L << (TINYINT - 131)) | (1L << (SMALLINT - 131)) | (1L << (MEDIUMINT - 131)) | (1L << (INT - 131)) | (1L << (INTEGER - 131)) | (1L << (BIGINT - 131)) | (1L << (REAL - 131)) | (1L << (DOUBLE - 131)) | (1L << (FLOAT - 131)) | (1L << (DECIMAL - 131)) | (1L << (NUMERIC - 131)) | (1L << (DATE - 131)) | (1L << (TIME - 131)) | (1L << (TIMESTAMP - 131)) | (1L << (DATETIME - 131)) | (1L << (YEAR - 131)) | (1L << (CHAR - 131)) | (1L << (VARCHAR - 131)) | (1L << (BINARY - 131)) | (1L << (VARBINARY - 131)) | (1L << (TINYBLOB - 131)) | (1L << (BLOB - 131)) | (1L << (MEDIUMBLOB - 131)) | (1L << (LONGBLOB - 131)) | (1L << (TINYTEXT - 131)) | (1L << (TEXT - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (MEDIUMTEXT - 195)) | (1L << (LONGTEXT - 195)) | (1L << (ENUM - 195)) | (1L << (BIT - 195)))) != 0) || _la==BOOL || _la==BOOLEAN || ((((_la - 551)) & ~0x3f) == 0 && ((1L << (_la - 551)) & ((1L << (MONTH - 551)) | (1L << (DAY - 551)) | (1L << (HOUR - 551)) | (1L << (MINUTE - 551)) | (1L << (WEEK - 551)) | (1L << (SECOND - 551)) | (1L << (MICROSECOND - 551)))) != 0) || _la==ID) {
						{
						setState(328);
						id();
						}
					}

					}
				}

				setState(333);
				match(FOREIGN);
				setState(334);
				match(KEY);
				setState(336);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (SET - 131)) | (1L << (TINYINT - 131)) | (1L << (SMALLINT - 131)) | (1L << (MEDIUMINT - 131)) | (1L << (INT - 131)) | (1L << (INTEGER - 131)) | (1L << (BIGINT - 131)) | (1L << (REAL - 131)) | (1L << (DOUBLE - 131)) | (1L << (FLOAT - 131)) | (1L << (DECIMAL - 131)) | (1L << (NUMERIC - 131)) | (1L << (DATE - 131)) | (1L << (TIME - 131)) | (1L << (TIMESTAMP - 131)) | (1L << (DATETIME - 131)) | (1L << (YEAR - 131)) | (1L << (CHAR - 131)) | (1L << (VARCHAR - 131)) | (1L << (BINARY - 131)) | (1L << (VARBINARY - 131)) | (1L << (TINYBLOB - 131)) | (1L << (BLOB - 131)) | (1L << (MEDIUMBLOB - 131)) | (1L << (LONGBLOB - 131)) | (1L << (TINYTEXT - 131)) | (1L << (TEXT - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (MEDIUMTEXT - 195)) | (1L << (LONGTEXT - 195)) | (1L << (ENUM - 195)) | (1L << (BIT - 195)))) != 0) || _la==BOOL || _la==BOOLEAN || ((((_la - 551)) & ~0x3f) == 0 && ((1L << (_la - 551)) & ((1L << (MONTH - 551)) | (1L << (DAY - 551)) | (1L << (HOUR - 551)) | (1L << (MINUTE - 551)) | (1L << (WEEK - 551)) | (1L << (SECOND - 551)) | (1L << (MICROSECOND - 551)))) != 0) || _la==ID) {
					{
					setState(335);
					id();
					}
				}

				setState(338);
				indexColumnNames();
				setState(339);
				referenceDefinition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(341);
				match(CHECK);
				setState(342);
				match(LR_BRACKET);
				setState(343);
				expression(0);
				setState(344);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceDefinitionContext extends ParserRuleContext {
		public TerminalNode REFERENCES() { return getToken(MySqlParser.REFERENCES, 0); }
		public IdSubIdContext idSubId() {
			return getRuleContext(IdSubIdContext.class,0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode MATCH() { return getToken(MySqlParser.MATCH, 0); }
		public ReferenceActionContext referenceAction() {
			return getRuleContext(ReferenceActionContext.class,0);
		}
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(MySqlParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(MySqlParser.SIMPLE, 0); }
		public ReferenceDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReferenceDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceDefinitionContext referenceDefinition() throws RecognitionException {
		ReferenceDefinitionContext _localctx = new ReferenceDefinitionContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_referenceDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(348);
			match(REFERENCES);
			setState(349);
			idSubId();
			setState(350);
			indexColumnNames();
			setState(353);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MATCH) {
				{
				setState(351);
				match(MATCH);
				setState(352);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(356);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(355);
				referenceAction();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceActionContext extends ParserRuleContext {
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public List<ReferenceControlTypeContext> referenceControlType() {
			return getRuleContexts(ReferenceControlTypeContext.class);
		}
		public ReferenceControlTypeContext referenceControlType(int i) {
			return getRuleContext(ReferenceControlTypeContext.class,i);
		}
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public ReferenceActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReferenceAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceActionContext referenceAction() throws RecognitionException {
		ReferenceActionContext _localctx = new ReferenceActionContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_referenceAction);
		int _la;
		try {
			setState(374);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(358);
				match(ON);
				setState(359);
				match(DELETE);
				setState(360);
				referenceControlType();
				setState(364);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(361);
					match(ON);
					setState(362);
					match(UPDATE);
					setState(363);
					referenceControlType();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(366);
				match(ON);
				setState(367);
				match(UPDATE);
				setState(368);
				referenceControlType();
				setState(372);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(369);
					match(ON);
					setState(370);
					match(DELETE);
					setState(371);
					referenceControlType();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceControlTypeContext extends ParserRuleContext {
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(MySqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(MySqlParser.ACTION, 0); }
		public ReferenceControlTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceControlType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceControlType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceControlType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReferenceControlType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceControlTypeContext referenceControlType() throws RecognitionException {
		ReferenceControlTypeContext _localctx = new ReferenceControlTypeContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_referenceControlType);
		try {
			setState(382);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESTRICT:
				enterOuterAlt(_localctx, 1);
				{
				setState(376);
				match(RESTRICT);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(377);
				match(CASCADE);
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(378);
				match(SET);
				setState(379);
				match(NULL_LITERAL);
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 4);
				{
				setState(380);
				match(NO);
				setState(381);
				match(ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnDefinitionContext extends ParserRuleContext {
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode FULLTEXT() { return getToken(MySqlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(MySqlParser.SPATIAL, 0); }
		public IndexColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnDefinitionContext indexColumnDefinition() throws RecognitionException {
		IndexColumnDefinitionContext _localctx = new IndexColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_indexColumnDefinition);
		int _la;
		try {
			setState(412);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEX:
			case KEY:
				enterOuterAlt(_localctx, 1);
				{
				setState(384);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(386);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (SET - 131)) | (1L << (TINYINT - 131)) | (1L << (SMALLINT - 131)) | (1L << (MEDIUMINT - 131)) | (1L << (INT - 131)) | (1L << (INTEGER - 131)) | (1L << (BIGINT - 131)) | (1L << (REAL - 131)) | (1L << (DOUBLE - 131)) | (1L << (FLOAT - 131)) | (1L << (DECIMAL - 131)) | (1L << (NUMERIC - 131)) | (1L << (DATE - 131)) | (1L << (TIME - 131)) | (1L << (TIMESTAMP - 131)) | (1L << (DATETIME - 131)) | (1L << (YEAR - 131)) | (1L << (CHAR - 131)) | (1L << (VARCHAR - 131)) | (1L << (BINARY - 131)) | (1L << (VARBINARY - 131)) | (1L << (TINYBLOB - 131)) | (1L << (BLOB - 131)) | (1L << (MEDIUMBLOB - 131)) | (1L << (LONGBLOB - 131)) | (1L << (TINYTEXT - 131)) | (1L << (TEXT - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (MEDIUMTEXT - 195)) | (1L << (LONGTEXT - 195)) | (1L << (ENUM - 195)) | (1L << (BIT - 195)))) != 0) || _la==BOOL || _la==BOOLEAN || ((((_la - 551)) & ~0x3f) == 0 && ((1L << (_la - 551)) & ((1L << (MONTH - 551)) | (1L << (DAY - 551)) | (1L << (HOUR - 551)) | (1L << (MINUTE - 551)) | (1L << (WEEK - 551)) | (1L << (SECOND - 551)) | (1L << (MICROSECOND - 551)))) != 0) || _la==ID) {
					{
					setState(385);
					id();
					}
				}

				setState(389);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(388);
					match(USING);
					}
				}

				setState(391);
				indexColumnNames();
				setState(395);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					setState(392);
					indexOption();
					}
					}
					setState(397);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case FULLTEXT:
			case SPATIAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(398);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(400);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(399);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(403);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (SET - 131)) | (1L << (TINYINT - 131)) | (1L << (SMALLINT - 131)) | (1L << (MEDIUMINT - 131)) | (1L << (INT - 131)) | (1L << (INTEGER - 131)) | (1L << (BIGINT - 131)) | (1L << (REAL - 131)) | (1L << (DOUBLE - 131)) | (1L << (FLOAT - 131)) | (1L << (DECIMAL - 131)) | (1L << (NUMERIC - 131)) | (1L << (DATE - 131)) | (1L << (TIME - 131)) | (1L << (TIMESTAMP - 131)) | (1L << (DATETIME - 131)) | (1L << (YEAR - 131)) | (1L << (CHAR - 131)) | (1L << (VARCHAR - 131)) | (1L << (BINARY - 131)) | (1L << (VARBINARY - 131)) | (1L << (TINYBLOB - 131)) | (1L << (BLOB - 131)) | (1L << (MEDIUMBLOB - 131)) | (1L << (LONGBLOB - 131)) | (1L << (TINYTEXT - 131)) | (1L << (TEXT - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (MEDIUMTEXT - 195)) | (1L << (LONGTEXT - 195)) | (1L << (ENUM - 195)) | (1L << (BIT - 195)))) != 0) || _la==BOOL || _la==BOOLEAN || ((((_la - 551)) & ~0x3f) == 0 && ((1L << (_la - 551)) & ((1L << (MONTH - 551)) | (1L << (DAY - 551)) | (1L << (HOUR - 551)) | (1L << (MINUTE - 551)) | (1L << (WEEK - 551)) | (1L << (SECOND - 551)) | (1L << (MICROSECOND - 551)))) != 0) || _la==ID) {
					{
					setState(402);
					id();
					}
				}

				setState(405);
				indexColumnNames();
				setState(409);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					setState(406);
					indexOption();
					}
					}
					setState(411);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnNamesContext extends ParserRuleContext {
		public List<IndexColumnNameContext> indexColumnName() {
			return getRuleContexts(IndexColumnNameContext.class);
		}
		public IndexColumnNameContext indexColumnName(int i) {
			return getRuleContext(IndexColumnNameContext.class,i);
		}
		public IndexColumnNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexColumnNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexColumnNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexColumnNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnNamesContext indexColumnNames() throws RecognitionException {
		IndexColumnNamesContext _localctx = new IndexColumnNamesContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_indexColumnNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(414);
			match(LR_BRACKET);
			setState(415);
			indexColumnName();
			setState(420);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(416);
				match(COMMA);
				setState(417);
				indexColumnName();
				}
				}
				setState(422);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(423);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnNameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public IndexColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnNameContext indexColumnName() throws RecognitionException {
		IndexColumnNameContext _localctx = new IndexColumnNameContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_indexColumnName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(425);
			id();
			setState(430);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(426);
				match(LR_BRACKET);
				setState(427);
				decimalLiteral();
				setState(428);
				match(RR_BRACKET);
				}
			}

			setState(433);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(432);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOptionContext extends ParserRuleContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode PARSER() { return getToken(MySqlParser.PARSER, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public IndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexOptionContext indexOption() throws RecognitionException {
		IndexOptionContext _localctx = new IndexOptionContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_indexOption);
		int _la;
		try {
			setState(446);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KEY_BLOCK_SIZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(435);
				match(KEY_BLOCK_SIZE);
				setState(437);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(436);
					match(EQUAL_SYMBOL);
					}
				}

				setState(439);
				fileSizeLiteral();
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(440);
				match(USING);
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 3);
				{
				setState(441);
				match(WITH);
				setState(442);
				match(PARSER);
				setState(443);
				id();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(444);
				match(COMMENT);
				setState(445);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public IdsContext ids() {
			return getRuleContext(IdsContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(MySqlParser.CASCADE, 0); }
		public DropTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableContext dropTable() throws RecognitionException {
		DropTableContext _localctx = new DropTableContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_dropTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(448);
			match(DROP);
			setState(450);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY) {
				{
				setState(449);
				match(TEMPORARY);
				}
			}

			setState(452);
			match(TABLE);
			setState(454);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(453);
				ifExists();
				}
			}

			setState(456);
			ids();
			setState(458);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(457);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public List<RenameTableClauseContext> renameTableClause() {
			return getRuleContexts(RenameTableClauseContext.class);
		}
		public RenameTableClauseContext renameTableClause(int i) {
			return getRuleContext(RenameTableClauseContext.class,i);
		}
		public RenameTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRenameTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRenameTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRenameTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableContext renameTable() throws RecognitionException {
		RenameTableContext _localctx = new RenameTableContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_renameTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(460);
			match(RENAME);
			setState(461);
			match(TABLE);
			setState(462);
			renameTableClause();
			setState(467);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(463);
				match(COMMA);
				setState(464);
				renameTableClause();
				}
				}
				setState(469);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableClauseContext extends ParserRuleContext {
		public List<IdSubIdContext> idSubId() {
			return getRuleContexts(IdSubIdContext.class);
		}
		public IdSubIdContext idSubId(int i) {
			return getRuleContext(IdSubIdContext.class,i);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public RenameTableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRenameTableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRenameTableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRenameTableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableClauseContext renameTableClause() throws RecognitionException {
		RenameTableClauseContext _localctx = new RenameTableClauseContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_renameTableClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(470);
			idSubId();
			setState(471);
			match(TO);
			setState(472);
			idSubId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(MySqlParser.SELECT, 0); }
		public SelectRowsContext selectRows() {
			return getRuleContext(SelectRowsContext.class,0);
		}
		public List<SelectModifierContext> selectModifier() {
			return getRuleContexts(SelectModifierContext.class);
		}
		public SelectModifierContext selectModifier(int i) {
			return getRuleContext(SelectModifierContext.class,i);
		}
		public SelectIntoContext selectInto() {
			return getRuleContext(SelectIntoContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public SelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectContext select() throws RecognitionException {
		SelectContext _localctx = new SelectContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_select);
		int _la;
		try {
			setState(514);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,68,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(474);
				match(SELECT);
				setState(478);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << DISTINCT) | (1L << DISTINCTROW))) != 0)) {
					{
					{
					setState(475);
					selectModifier();
					}
					}
					setState(480);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(481);
				selectRows();
				setState(483);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(482);
					selectInto();
					}
				}

				setState(486);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(485);
					fromClause();
					}
				}

				setState(489);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(488);
					orderByClause();
					}
				}

				setState(492);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(491);
					limitClause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(494);
				match(SELECT);
				setState(498);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << DISTINCT) | (1L << DISTINCTROW))) != 0)) {
					{
					{
					setState(495);
					selectModifier();
					}
					}
					setState(500);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(501);
				selectRows();
				setState(503);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(502);
					fromClause();
					}
				}

				setState(506);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(505);
					orderByClause();
					}
				}

				setState(509);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(508);
					limitClause();
					}
				}

				setState(512);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(511);
					selectInto();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectModifierContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public TerminalNode DISTINCTROW() { return getToken(MySqlParser.DISTINCTROW, 0); }
		public SelectModifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectModifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectModifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectModifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectModifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectModifierContext selectModifier() throws RecognitionException {
		SelectModifierContext _localctx = new SelectModifierContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_selectModifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(516);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << DISTINCT) | (1L << DISTINCTROW))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectRowsContext extends ParserRuleContext {
		public List<SelectRowContext> selectRow() {
			return getRuleContexts(SelectRowContext.class);
		}
		public SelectRowContext selectRow(int i) {
			return getRuleContext(SelectRowContext.class,i);
		}
		public SelectRowsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectRows; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectRows(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectRowsContext selectRows() throws RecognitionException {
		SelectRowsContext _localctx = new SelectRowsContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_selectRows);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(520);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STAR:
				{
				setState(518);
				match(STAR);
				}
				break;
			case CURRENT_USER:
			case EXISTS:
			case FALSE:
			case INTERVAL:
			case NOT:
			case NULL_LITERAL:
			case SET:
			case TRUE:
			case VALUES:
			case TINYINT:
			case SMALLINT:
			case MEDIUMINT:
			case INT:
			case INTEGER:
			case BIGINT:
			case REAL:
			case DOUBLE:
			case FLOAT:
			case DECIMAL:
			case NUMERIC:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case CHAR:
			case VARCHAR:
			case BINARY:
			case VARBINARY:
			case TINYBLOB:
			case BLOB:
			case MEDIUMBLOB:
			case LONGBLOB:
			case TINYTEXT:
			case TEXT:
			case MEDIUMTEXT:
			case LONGTEXT:
			case ENUM:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case SUBSTR:
			case SUBSTRING:
			case TRIM:
			case BIT:
			case BOOL:
			case BOOLEAN:
			case ROW:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case PLUS:
			case MINUS:
			case EXCLAMATION_SYMBOL:
			case BIT_NOT_OP:
			case LR_BRACKET:
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case START_NATIONAL_STRING_LITERAL:
			case STRING_LITERAL:
			case DECIMAL_LITERAL:
			case HEXADECIMAL_LITERAL:
			case REAL_LITERAL:
			case BIT_STRING:
			case STRING_CHARSET_NAME:
			case ID:
			case LOCAL_ID:
				{
				setState(519);
				selectRow();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(526);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(522);
				match(COMMA);
				setState(523);
				selectRow();
				}
				}
				setState(528);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectRowContext extends ParserRuleContext {
		public IdSubIdContext idSubId() {
			return getRuleContext(IdSubIdContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(MySqlParser.VAR_ASSIGN, 0); }
		public SelectRowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectRow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectRowContext selectRow() throws RecognitionException {
		SelectRowContext _localctx = new SelectRowContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_selectRow);
		int _la;
		try {
			setState(551);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(529);
				idSubId();
				setState(534);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
				case 1:
					{
					setState(531);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(530);
						match(AS);
						}
					}

					setState(533);
					id();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(536);
				idSubId();
				setState(537);
				match(DOT);
				setState(538);
				match(STAR);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(542);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
				case 1:
					{
					setState(540);
					match(LOCAL_ID);
					setState(541);
					match(VAR_ASSIGN);
					}
					break;
				}
				setState(544);
				expression(0);
				setState(549);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
				case 1:
					{
					setState(546);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(545);
						match(AS);
						}
					}

					setState(548);
					id();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectIntoContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DUMPFILE() { return getToken(MySqlParser.DUMPFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public SelectIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectInto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectInto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectInto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectInto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectIntoContext selectInto() throws RecognitionException {
		SelectIntoContext _localctx = new SelectIntoContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_selectInto);
		int _la;
		try {
			setState(565);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(553);
				match(INTO);
				setState(554);
				id();
				setState(559);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(555);
					match(COMMA);
					setState(556);
					id();
					}
					}
					setState(561);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(562);
				match(INTO);
				setState(563);
				match(DUMPFILE);
				setState(564);
				match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TableContentsContext tableContents() {
			return getRuleContext(TableContentsContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<GroupByExpressionContext> groupByExpression() {
			return getRuleContexts(GroupByExpressionContext.class);
		}
		public GroupByExpressionContext groupByExpression(int i) {
			return getRuleContext(GroupByExpressionContext.class,i);
		}
		public TerminalNode HAVING() { return getToken(MySqlParser.HAVING, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode ROLLUP() { return getToken(MySqlParser.ROLLUP, 0); }
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFromClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_fromClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(567);
			match(FROM);
			setState(568);
			tableContents();
			setState(571);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(569);
				match(WHERE);
				setState(570);
				expression(0);
				}
			}

			setState(587);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(573);
				match(GROUP);
				setState(574);
				match(BY);
				setState(575);
				groupByExpression();
				setState(580);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(576);
					match(COMMA);
					setState(577);
					groupByExpression();
					}
					}
					setState(582);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(585);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,81,_ctx) ) {
				case 1:
					{
					setState(583);
					match(WITH);
					setState(584);
					match(ROLLUP);
					}
					break;
				}
				}
			}

			setState(591);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(589);
				match(HAVING);
				setState(590);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableContentsContext extends ParserRuleContext {
		public List<TableContentContext> tableContent() {
			return getRuleContexts(TableContentContext.class);
		}
		public TableContentContext tableContent(int i) {
			return getRuleContext(TableContentContext.class,i);
		}
		public TableContentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableContents; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableContents(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableContents(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableContents(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableContentsContext tableContents() throws RecognitionException {
		TableContentsContext _localctx = new TableContentsContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_tableContents);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(593);
			tableContent();
			setState(598);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(594);
				match(COMMA);
				setState(595);
				tableContent();
				}
				}
				setState(600);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableContentContext extends ParserRuleContext {
		public TableRowContext tableRow() {
			return getRuleContext(TableRowContext.class,0);
		}
		public List<JoinContext> join() {
			return getRuleContexts(JoinContext.class);
		}
		public JoinContext join(int i) {
			return getRuleContext(JoinContext.class,i);
		}
		public TableContentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableContent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableContent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableContent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableContent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableContentContext tableContent() throws RecognitionException {
		TableContentContext _localctx = new TableContentContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_tableContent);
		int _la;
		try {
			setState(618);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,87,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(601);
				tableRow();
				setState(605);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (CROSS - 30)) | (1L << (INNER - 30)) | (1L << (JOIN - 30)) | (1L << (LEFT - 30)))) != 0) || ((((_la - 96)) & ~0x3f) == 0 && ((1L << (_la - 96)) & ((1L << (NATURAL - 96)) | (1L << (RIGHT - 96)) | (1L << (STRAIGHT_JOIN - 96)))) != 0)) {
					{
					{
					setState(602);
					join();
					}
					}
					setState(607);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(608);
				match(LR_BRACKET);
				setState(609);
				tableRow();
				setState(613);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (CROSS - 30)) | (1L << (INNER - 30)) | (1L << (JOIN - 30)) | (1L << (LEFT - 30)))) != 0) || ((((_la - 96)) & ~0x3f) == 0 && ((1L << (_la - 96)) & ((1L << (NATURAL - 96)) | (1L << (RIGHT - 96)) | (1L << (STRAIGHT_JOIN - 96)))) != 0)) {
					{
					{
					setState(610);
					join();
					}
					}
					setState(615);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(616);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableRowContext extends ParserRuleContext {
		public IdSubIdContext idSubId() {
			return getRuleContext(IdSubIdContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public TableContentsContext tableContents() {
			return getRuleContext(TableContentsContext.class,0);
		}
		public TableRowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableRow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableRowContext tableRow() throws RecognitionException {
		TableRowContext _localctx = new TableRowContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_tableRow);
		int _la;
		try {
			setState(637);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(620);
				idSubId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(626);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SELECT:
					{
					setState(621);
					select();
					}
					break;
				case LR_BRACKET:
					{
					setState(622);
					match(LR_BRACKET);
					setState(623);
					select();
					setState(624);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(629);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(628);
					match(AS);
					}
				}

				setState(631);
				id();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(633);
				match(LR_BRACKET);
				setState(634);
				tableContents();
				setState(635);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TableRowContext tableRow() {
			return getRuleContext(TableRowContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public IdsContext ids() {
			return getRuleContext(IdsContext.class,0);
		}
		public TerminalNode INNER() { return getToken(MySqlParser.INNER, 0); }
		public TerminalNode CROSS() { return getToken(MySqlParser.CROSS, 0); }
		public TerminalNode STRAIGHT_JOIN() { return getToken(MySqlParser.STRAIGHT_JOIN, 0); }
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(MySqlParser.OUTER, 0); }
		public TerminalNode NATURAL() { return getToken(MySqlParser.NATURAL, 0); }
		public JoinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitJoin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinContext join() throws RecognitionException {
		JoinContext _localctx = new JoinContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_join);
		int _la;
		try {
			setState(683);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CROSS:
			case INNER:
			case JOIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(640);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CROSS || _la==INNER) {
					{
					setState(639);
					_la = _input.LA(1);
					if ( !(_la==CROSS || _la==INNER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(642);
				match(JOIN);
				setState(643);
				tableRow();
				setState(651);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON:
					{
					setState(644);
					match(ON);
					setState(645);
					expression(0);
					}
					break;
				case USING:
					{
					setState(646);
					match(USING);
					setState(647);
					match(LR_BRACKET);
					setState(648);
					ids();
					setState(649);
					match(RR_BRACKET);
					}
					break;
				case AS:
				case CROSS:
				case GROUP:
				case HAVING:
				case INNER:
				case INTO:
				case JOIN:
				case LEFT:
				case LIMIT:
				case NATURAL:
				case ORDER:
				case RIGHT:
				case SET:
				case STRAIGHT_JOIN:
				case WHERE:
				case WITH:
				case TINYINT:
				case SMALLINT:
				case MEDIUMINT:
				case INT:
				case INTEGER:
				case BIGINT:
				case REAL:
				case DOUBLE:
				case FLOAT:
				case DECIMAL:
				case NUMERIC:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case CHAR:
				case VARCHAR:
				case BINARY:
				case VARBINARY:
				case TINYBLOB:
				case BLOB:
				case MEDIUMBLOB:
				case LONGBLOB:
				case TINYTEXT:
				case TEXT:
				case MEDIUMTEXT:
				case LONGTEXT:
				case ENUM:
				case BIT:
				case BOOL:
				case BOOLEAN:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case RR_BRACKET:
				case COMMA:
				case SEMI:
				case ID:
					break;
				default:
					break;
				}
				}
				break;
			case STRAIGHT_JOIN:
				enterOuterAlt(_localctx, 2);
				{
				setState(653);
				match(STRAIGHT_JOIN);
				setState(654);
				tableRow();
				setState(657);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(655);
					match(ON);
					setState(656);
					expression(0);
					}
				}

				}
				break;
			case LEFT:
			case RIGHT:
				enterOuterAlt(_localctx, 3);
				{
				setState(659);
				_la = _input.LA(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(661);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(660);
					match(OUTER);
					}
				}

				setState(663);
				match(JOIN);
				setState(664);
				tableRow();
				setState(672);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON:
					{
					setState(665);
					match(ON);
					setState(666);
					expression(0);
					}
					break;
				case USING:
					{
					setState(667);
					match(USING);
					setState(668);
					match(LR_BRACKET);
					setState(669);
					ids();
					setState(670);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(674);
				match(NATURAL);
				setState(679);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT) {
					{
					setState(675);
					_la = _input.LA(1);
					if ( !(_la==LEFT || _la==RIGHT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(677);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OUTER) {
						{
						setState(676);
						match(OUTER);
						}
					}

					}
				}

				setState(681);
				match(JOIN);
				setState(682);
				tableRow();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOrderByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOrderByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOrderByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByClauseContext orderByClause() throws RecognitionException {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_orderByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(685);
			match(ORDER);
			setState(686);
			match(BY);
			setState(687);
			orderByExpression();
			setState(692);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(688);
				match(COMMA);
				setState(689);
				orderByExpression();
				}
				}
				setState(694);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode OFFSET() { return getToken(MySqlParser.OFFSET, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLimitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLimitClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLimitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_limitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(695);
			match(LIMIT);
			setState(696);
			decimalLiteral();
			setState(697);
			match(OFFSET);
			setState(698);
			decimalLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByExpressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public OrderByExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOrderByExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOrderByExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOrderByExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByExpressionContext orderByExpression() throws RecognitionException {
		OrderByExpressionContext _localctx = new OrderByExpressionContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_orderByExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(700);
			expression(0);
			setState(702);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(701);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByExpressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public GroupByExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGroupByExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGroupByExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGroupByExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByExpressionContext groupByExpression() throws RecognitionException {
		GroupByExpressionContext _localctx = new GroupByExpressionContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_groupByExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(704);
			expression(0);
			setState(706);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(705);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertContext extends ParserRuleContext {
		public IdSubIdContext table;
		public IdsContext columns;
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public IdSubIdContext idSubId() {
			return getRuleContext(IdSubIdContext.class,0);
		}
		public InsertValueContext insertValue() {
			return getRuleContext(InsertValueContext.class,0);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public IdsContext ids() {
			return getRuleContext(IdsContext.class,0);
		}
		public InsertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInsert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInsert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInsert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertContext insert() throws RecognitionException {
		InsertContext _localctx = new InsertContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(708);
			match(INSERT);
			setState(710);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(709);
				match(IGNORE);
				}
			}

			setState(713);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(712);
				match(INTO);
				}
			}

			setState(715);
			((InsertContext)_localctx).table = idSubId();
			{
			setState(720);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(716);
				match(LR_BRACKET);
				setState(717);
				((InsertContext)_localctx).columns = ids();
				setState(718);
				match(RR_BRACKET);
				}
			}

			setState(722);
			insertValue();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertValueContext extends ParserRuleContext {
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public List<ExpressionsOrDefaultsContext> expressionsOrDefaults() {
			return getRuleContexts(ExpressionsOrDefaultsContext.class);
		}
		public ExpressionsOrDefaultsContext expressionsOrDefaults(int i) {
			return getRuleContext(ExpressionsOrDefaultsContext.class,i);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public InsertValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInsertValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInsertValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInsertValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertValueContext insertValue() throws RecognitionException {
		InsertValueContext _localctx = new InsertValueContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_insertValue);
		int _la;
		try {
			setState(739);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(724);
				select();
				}
				break;
			case VALUES:
			case VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(725);
				_la = _input.LA(1);
				if ( !(_la==VALUES || _la==VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(726);
				match(LR_BRACKET);
				setState(727);
				expressionsOrDefaults();
				setState(728);
				match(RR_BRACKET);
				setState(736);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(729);
					match(COMMA);
					setState(730);
					match(LR_BRACKET);
					setState(731);
					expressionsOrDefaults();
					setState(732);
					match(RR_BRACKET);
					}
					}
					setState(738);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateContext extends ParserRuleContext {
		public IdSubIdContext table;
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<UpdateAssignmentContext> updateAssignment() {
			return getRuleContexts(UpdateAssignmentContext.class);
		}
		public UpdateAssignmentContext updateAssignment(int i) {
			return getRuleContext(UpdateAssignmentContext.class,i);
		}
		public IdSubIdContext idSubId() {
			return getRuleContext(IdSubIdContext.class,0);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public UpdateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUpdate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUpdate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUpdate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateContext update() throws RecognitionException {
		UpdateContext _localctx = new UpdateContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_update);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(741);
			match(UPDATE);
			setState(743);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(742);
				match(IGNORE);
				}
			}

			setState(745);
			((UpdateContext)_localctx).table = idSubId();
			setState(750);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,109,_ctx) ) {
			case 1:
				{
				setState(747);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(746);
					match(AS);
					}
				}

				setState(749);
				id();
				}
				break;
			}
			setState(752);
			match(SET);
			setState(753);
			updateAssignment();
			setState(758);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(754);
				match(COMMA);
				setState(755);
				updateAssignment();
				}
				}
				setState(760);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(763);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(761);
				match(WHERE);
				setState(762);
				expression(0);
				}
			}

			setState(766);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(765);
				orderByClause();
				}
			}

			setState(769);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(768);
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateAssignmentContext extends ParserRuleContext {
		public IdSubIdContext idSubId() {
			return getRuleContext(IdSubIdContext.class,0);
		}
		public ExpressionOrDefaultContext expressionOrDefault() {
			return getRuleContext(ExpressionOrDefaultContext.class,0);
		}
		public UpdateAssignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateAssignment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUpdateAssignment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUpdateAssignment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUpdateAssignment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateAssignmentContext updateAssignment() throws RecognitionException {
		UpdateAssignmentContext _localctx = new UpdateAssignmentContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_updateAssignment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(771);
			idSubId();
			setState(772);
			match(EQUAL_SYMBOL);
			setState(773);
			expressionOrDefault();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteContext extends ParserRuleContext {
		public IdSubIdContext table;
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public IdSubIdContext idSubId() {
			return getRuleContext(IdSubIdContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public DeleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDelete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDelete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDelete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteContext delete() throws RecognitionException {
		DeleteContext _localctx = new DeleteContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_delete);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(775);
			match(DELETE);
			setState(776);
			match(FROM);
			setState(777);
			((DeleteContext)_localctx).table = idSubId();
			setState(780);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(778);
				match(WHERE);
				setState(779);
				expression(0);
				}
			}

			setState(783);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(782);
				orderByClause();
				}
			}

			setState(787);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(785);
				match(LIMIT);
				setState(786);
				decimalLiteral();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplaceContext extends ParserRuleContext {
		public IdSubIdContext table;
		public IdsContext columns;
		public UpdateAssignmentContext setFirst;
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public IdSubIdContext idSubId() {
			return getRuleContext(IdSubIdContext.class,0);
		}
		public InsertValueContext insertValue() {
			return getRuleContext(InsertValueContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public UpdateAssignmentContext updateAssignment() {
			return getRuleContext(UpdateAssignmentContext.class,0);
		}
		public IdsContext ids() {
			return getRuleContext(IdsContext.class,0);
		}
		public ReplaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReplace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReplace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReplace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplaceContext replace() throws RecognitionException {
		ReplaceContext _localctx = new ReplaceContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_replace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(789);
			match(REPLACE);
			setState(791);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(790);
				match(INTO);
				}
			}

			setState(793);
			((ReplaceContext)_localctx).table = idSubId();
			setState(803);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				setState(798);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(794);
					match(LR_BRACKET);
					setState(795);
					((ReplaceContext)_localctx).columns = ids();
					setState(796);
					match(RR_BRACKET);
					}
				}

				setState(800);
				insertValue();
				}
				break;
			case SET:
				{
				setState(801);
				match(SET);
				setState(802);
				((ReplaceContext)_localctx).setFirst = updateAssignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(MySqlParser.IS, 0); }
		public TerminalNode TRUE() { return getToken(MySqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(MySqlParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(MySqlParser.UNKNOWN, 0); }
		public LogicalOperatorContext logicalOperator() {
			return getRuleContext(LogicalOperatorContext.class,0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		return expression(0);
	}

	private ExpressionContext expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 80;
		enterRecursionRule(_localctx, 80, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(816);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,121,_ctx) ) {
			case 1:
				{
				setState(806);
				_la = _input.LA(1);
				if ( !(_la==NOT || _la==EXCLAMATION_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(807);
				expression(4);
				}
				break;
			case 2:
				{
				setState(808);
				predicate(0);
				setState(809);
				match(IS);
				setState(811);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(810);
					match(NOT);
					}
				}

				setState(813);
				_la = _input.LA(1);
				if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				{
				setState(815);
				predicate(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(824);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,122,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_expression);
					setState(818);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(819);
					logicalOperator();
					setState(820);
					expression(4);
					}
					} 
				}
				setState(826);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,122,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ExpressionsContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExpressions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsContext expressions() throws RecognitionException {
		ExpressionsContext _localctx = new ExpressionsContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_expressions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(827);
			expression(0);
			setState(832);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(828);
				match(COMMA);
				setState(829);
				expression(0);
				}
				}
				setState(834);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public Token regex;
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(MySqlParser.VAR_ASSIGN, 0); }
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(MySqlParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode SOUNDS() { return getToken(MySqlParser.SOUNDS, 0); }
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public TerminalNode REGEXP() { return getToken(MySqlParser.REGEXP, 0); }
		public TerminalNode RLIKE() { return getToken(MySqlParser.RLIKE, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode IS() { return getToken(MySqlParser.IS, 0); }
		public NullOrNotNullContext nullOrNotNull() {
			return getRuleContext(NullOrNotNullContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(MySqlParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(MySqlParser.SOME, 0); }
		public TerminalNode ESCAPE() { return getToken(MySqlParser.ESCAPE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		PredicateContext _localctx = new PredicateContext(_ctx, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 84;
		enterRecursionRule(_localctx, 84, RULE_predicate, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(838);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL_ID) {
				{
				setState(836);
				match(LOCAL_ID);
				setState(837);
				match(VAR_ASSIGN);
				}
			}

			setState(840);
			expressionAtom(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(899);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,132,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(897);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
					case 1:
						{
						_localctx = new PredicateContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(842);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(843);
						comparisonOperator();
						setState(844);
						predicate(8);
						}
						break;
					case 2:
						{
						_localctx = new PredicateContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(846);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(848);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(847);
							match(NOT);
							}
						}

						setState(850);
						match(BETWEEN);
						setState(851);
						predicate(0);
						setState(852);
						match(AND);
						setState(853);
						predicate(6);
						}
						break;
					case 3:
						{
						_localctx = new PredicateContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(855);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(856);
						match(SOUNDS);
						setState(857);
						match(LIKE);
						setState(858);
						predicate(5);
						}
						break;
					case 4:
						{
						_localctx = new PredicateContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(859);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(861);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(860);
							match(NOT);
							}
						}

						setState(863);
						((PredicateContext)_localctx).regex = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==REGEXP || _la==RLIKE) ) {
							((PredicateContext)_localctx).regex = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(864);
						predicate(3);
						}
						break;
					case 5:
						{
						_localctx = new PredicateContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(865);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(867);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(866);
							match(NOT);
							}
						}

						setState(869);
						match(IN);
						setState(870);
						match(LR_BRACKET);
						setState(873);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case SELECT:
							{
							setState(871);
							select();
							}
							break;
						case CURRENT_USER:
						case EXISTS:
						case FALSE:
						case INTERVAL:
						case NOT:
						case NULL_LITERAL:
						case SET:
						case TRUE:
						case VALUES:
						case TINYINT:
						case SMALLINT:
						case MEDIUMINT:
						case INT:
						case INTEGER:
						case BIGINT:
						case REAL:
						case DOUBLE:
						case FLOAT:
						case DECIMAL:
						case NUMERIC:
						case DATE:
						case TIME:
						case TIMESTAMP:
						case DATETIME:
						case YEAR:
						case CHAR:
						case VARCHAR:
						case BINARY:
						case VARBINARY:
						case TINYBLOB:
						case BLOB:
						case MEDIUMBLOB:
						case LONGBLOB:
						case TINYTEXT:
						case TEXT:
						case MEDIUMTEXT:
						case LONGTEXT:
						case ENUM:
						case AVG:
						case BIT_AND:
						case BIT_OR:
						case BIT_XOR:
						case COUNT:
						case GROUP_CONCAT:
						case MAX:
						case MIN:
						case STD:
						case STDDEV:
						case STDDEV_POP:
						case STDDEV_SAMP:
						case SUM:
						case VAR_POP:
						case VAR_SAMP:
						case VARIANCE:
						case CURRENT_DATE:
						case CURRENT_TIME:
						case CURRENT_TIMESTAMP:
						case LOCALTIME:
						case SUBSTR:
						case SUBSTRING:
						case TRIM:
						case BIT:
						case BOOL:
						case BOOLEAN:
						case ROW:
						case MONTH:
						case DAY:
						case HOUR:
						case MINUTE:
						case WEEK:
						case SECOND:
						case MICROSECOND:
						case PLUS:
						case MINUS:
						case EXCLAMATION_SYMBOL:
						case BIT_NOT_OP:
						case LR_BRACKET:
						case ZERO_DECIMAL:
						case ONE_DECIMAL:
						case TWO_DECIMAL:
						case START_NATIONAL_STRING_LITERAL:
						case STRING_LITERAL:
						case DECIMAL_LITERAL:
						case HEXADECIMAL_LITERAL:
						case REAL_LITERAL:
						case BIT_STRING:
						case STRING_CHARSET_NAME:
						case ID:
						case LOCAL_ID:
							{
							setState(872);
							expressions();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(875);
						match(RR_BRACKET);
						}
						break;
					case 6:
						{
						_localctx = new PredicateContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(877);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(878);
						match(IS);
						setState(879);
						nullOrNotNull();
						}
						break;
					case 7:
						{
						_localctx = new PredicateContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(880);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(881);
						comparisonOperator();
						setState(882);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(883);
						match(LR_BRACKET);
						setState(884);
						select();
						setState(885);
						match(RR_BRACKET);
						}
						break;
					case 8:
						{
						_localctx = new PredicateContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(887);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(889);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(888);
							match(NOT);
							}
						}

						setState(891);
						match(LIKE);
						setState(892);
						predicate(0);
						setState(895);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
						case 1:
							{
							setState(893);
							match(ESCAPE);
							setState(894);
							match(STRING_LITERAL);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				setState(901);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,132,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ExpressionAtomContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public IdSubIdContext idSubId() {
			return getRuleContext(IdSubIdContext.class,0);
		}
		public FunctionContext function() {
			return getRuleContext(FunctionContext.class,0);
		}
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public TerminalNode INTERVAL() { return getToken(MySqlParser.INTERVAL, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public BitOperatorContext bitOperator() {
			return getRuleContext(BitOperatorContext.class,0);
		}
		public MathOperatorContext mathOperator() {
			return getRuleContext(MathOperatorContext.class,0);
		}
		public ExpressionAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionAtom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionAtomContext expressionAtom() throws RecognitionException {
		return expressionAtom(0);
	}

	private ExpressionAtomContext expressionAtom(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionAtomContext _localctx = new ExpressionAtomContext(_ctx, _parentState);
		ExpressionAtomContext _prevctx = _localctx;
		int _startState = 86;
		enterRecursionRule(_localctx, 86, RULE_expressionAtom, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(946);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,135,_ctx) ) {
			case 1:
				{
				setState(903);
				constant();
				}
				break;
			case 2:
				{
				setState(904);
				idSubId();
				}
				break;
			case 3:
				{
				setState(905);
				function();
				}
				break;
			case 4:
				{
				setState(906);
				unaryOperator();
				setState(907);
				expressionAtom(9);
				}
				break;
			case 5:
				{
				setState(909);
				match(BINARY);
				setState(910);
				expressionAtom(8);
				}
				break;
			case 6:
				{
				setState(911);
				match(LR_BRACKET);
				setState(912);
				expression(0);
				setState(917);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(913);
					match(COMMA);
					setState(914);
					expression(0);
					}
					}
					setState(919);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(920);
				match(RR_BRACKET);
				}
				break;
			case 7:
				{
				setState(922);
				match(ROW);
				setState(923);
				match(LR_BRACKET);
				setState(924);
				expression(0);
				setState(927); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(925);
					match(COMMA);
					setState(926);
					expression(0);
					}
					}
					setState(929); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(931);
				match(RR_BRACKET);
				}
				break;
			case 8:
				{
				setState(933);
				match(EXISTS);
				setState(934);
				match(LR_BRACKET);
				setState(935);
				select();
				setState(936);
				match(RR_BRACKET);
				}
				break;
			case 9:
				{
				setState(938);
				match(LR_BRACKET);
				setState(939);
				select();
				setState(940);
				match(RR_BRACKET);
				}
				break;
			case 10:
				{
				setState(942);
				match(INTERVAL);
				setState(943);
				expression(0);
				setState(944);
				intervalType();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(958);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,137,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(956);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,136,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionAtomContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(948);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(949);
						bitOperator();
						setState(950);
						expressionAtom(3);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionAtomContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(952);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(953);
						mathOperator();
						setState(954);
						expressionAtom(2);
						}
						break;
					}
					} 
				}
				setState(960);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,137,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ExpressionOrDefaultContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public ExpressionOrDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionOrDefault; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressionOrDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressionOrDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExpressionOrDefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionOrDefaultContext expressionOrDefault() throws RecognitionException {
		ExpressionOrDefaultContext _localctx = new ExpressionOrDefaultContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_expressionOrDefault);
		try {
			setState(963);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_USER:
			case EXISTS:
			case FALSE:
			case INTERVAL:
			case NOT:
			case NULL_LITERAL:
			case SET:
			case TRUE:
			case VALUES:
			case TINYINT:
			case SMALLINT:
			case MEDIUMINT:
			case INT:
			case INTEGER:
			case BIGINT:
			case REAL:
			case DOUBLE:
			case FLOAT:
			case DECIMAL:
			case NUMERIC:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case CHAR:
			case VARCHAR:
			case BINARY:
			case VARBINARY:
			case TINYBLOB:
			case BLOB:
			case MEDIUMBLOB:
			case LONGBLOB:
			case TINYTEXT:
			case TEXT:
			case MEDIUMTEXT:
			case LONGTEXT:
			case ENUM:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case SUBSTR:
			case SUBSTRING:
			case TRIM:
			case BIT:
			case BOOL:
			case BOOLEAN:
			case ROW:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case PLUS:
			case MINUS:
			case EXCLAMATION_SYMBOL:
			case BIT_NOT_OP:
			case LR_BRACKET:
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case START_NATIONAL_STRING_LITERAL:
			case STRING_LITERAL:
			case DECIMAL_LITERAL:
			case HEXADECIMAL_LITERAL:
			case REAL_LITERAL:
			case BIT_STRING:
			case STRING_CHARSET_NAME:
			case ID:
			case LOCAL_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(961);
				expression(0);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(962);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsOrDefaultsContext extends ParserRuleContext {
		public List<ExpressionOrDefaultContext> expressionOrDefault() {
			return getRuleContexts(ExpressionOrDefaultContext.class);
		}
		public ExpressionOrDefaultContext expressionOrDefault(int i) {
			return getRuleContext(ExpressionOrDefaultContext.class,i);
		}
		public ExpressionsOrDefaultsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionsOrDefaults; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressionsOrDefaults(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressionsOrDefaults(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExpressionsOrDefaults(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsOrDefaultsContext expressionsOrDefaults() throws RecognitionException {
		ExpressionsOrDefaultsContext _localctx = new ExpressionsOrDefaultsContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_expressionsOrDefaults);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(965);
			expressionOrDefault();
			setState(970);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(966);
				match(COMMA);
				setState(967);
				expressionOrDefault();
				}
				}
				setState(972);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public BooleanLiteralContext booleanLiteral() {
			return getRuleContext(BooleanLiteralContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public HexadecimalLiteralContext hexadecimalLiteral() {
			return getRuleContext(HexadecimalLiteralContext.class,0);
		}
		public TerminalNode REAL_LITERAL() { return getToken(MySqlParser.REAL_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(MySqlParser.BIT_STRING, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_constant);
		int _la;
		try {
			setState(983);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,141,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(973);
				booleanLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(974);
				decimalLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(975);
				stringLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(976);
				hexadecimalLiteral();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(977);
				match(REAL_LITERAL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(978);
				match(BIT_STRING);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(980);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(979);
					match(NOT);
					}
				}

				setState(982);
				match(NULL_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringLiteralContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode START_NATIONAL_STRING_LITERAL() { return getToken(MySqlParser.START_NATIONAL_STRING_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStringLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStringLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringLiteralContext stringLiteral() throws RecognitionException {
		StringLiteralContext _localctx = new StringLiteralContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_stringLiteral);
		int _la;
		try {
			int _alt;
			setState(1004);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,147,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(990);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(986);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(985);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(988);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(989);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(993); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(992);
						match(STRING_LITERAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(995); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,144,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1002);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(998);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(997);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(1000);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(1001);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecimalLiteralContext extends ParserRuleContext {
		public TerminalNode DECIMAL_LITERAL() { return getToken(MySqlParser.DECIMAL_LITERAL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(MySqlParser.TWO_DECIMAL, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DecimalLiteralContext decimalLiteral() throws RecognitionException {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_decimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1006);
			_la = _input.LA(1);
			if ( !(((((_la - 950)) & ~0x3f) == 0 && ((1L << (_la - 950)) & ((1L << (ZERO_DECIMAL - 950)) | (1L << (ONE_DECIMAL - 950)) | (1L << (TWO_DECIMAL - 950)) | (1L << (DECIMAL_LITERAL - 950)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FileSizeLiteralContext extends ParserRuleContext {
		public TerminalNode FILESIZE_LITERAL() { return getToken(MySqlParser.FILESIZE_LITERAL, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public FileSizeLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileSizeLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFileSizeLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFileSizeLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFileSizeLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FileSizeLiteralContext fileSizeLiteral() throws RecognitionException {
		FileSizeLiteralContext _localctx = new FileSizeLiteralContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_fileSizeLiteral);
		try {
			setState(1010);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILESIZE_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1008);
				match(FILESIZE_LITERAL);
				}
				break;
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1009);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HexadecimalLiteralContext extends ParserRuleContext {
		public TerminalNode HEXADECIMAL_LITERAL() { return getToken(MySqlParser.HEXADECIMAL_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		public HexadecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hexadecimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHexadecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHexadecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHexadecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HexadecimalLiteralContext hexadecimalLiteral() throws RecognitionException {
		HexadecimalLiteralContext _localctx = new HexadecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_hexadecimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1013);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING_CHARSET_NAME) {
				{
				setState(1012);
				match(STRING_CHARSET_NAME);
				}
			}

			setState(1015);
			match(HEXADECIMAL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanLiteralContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(MySqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(MySqlParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBooleanLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBooleanLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBooleanLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanLiteralContext booleanLiteral() throws RecognitionException {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_booleanLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1017);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionContext extends ParserRuleContext {
		public SpecificFunctionContext specificFunction() {
			return getRuleContext(SpecificFunctionContext.class,0);
		}
		public AggregateFunctionContext aggregateFunction() {
			return getRuleContext(AggregateFunctionContext.class,0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionContext function() throws RecognitionException {
		FunctionContext _localctx = new FunctionContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_function);
		try {
			setState(1021);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_USER:
			case VALUES:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case SUBSTR:
			case SUBSTRING:
			case TRIM:
				enterOuterAlt(_localctx, 1);
				{
				setState(1019);
				specificFunction();
				}
				break;
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1020);
				aggregateFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecificFunctionContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode SUBSTR() { return getToken(MySqlParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(MySqlParser.SUBSTRING, 0); }
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode TRIM() { return getToken(MySqlParser.TRIM, 0); }
		public TerminalNode BOTH() { return getToken(MySqlParser.BOTH, 0); }
		public TerminalNode LEADING() { return getToken(MySqlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(MySqlParser.TRAILING, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(MySqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(MySqlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(MySqlParser.CURRENT_USER, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySqlParser.LOCALTIME, 0); }
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public IdSubIdContext idSubId() {
			return getRuleContext(IdSubIdContext.class,0);
		}
		public SpecificFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specificFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSpecificFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSpecificFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSpecificFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecificFunctionContext specificFunction() throws RecognitionException {
		SpecificFunctionContext _localctx = new SpecificFunctionContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_specificFunction);
		int _la;
		try {
			setState(1076);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1023);
				_la = _input.LA(1);
				if ( !(_la==SUBSTR || _la==SUBSTRING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1024);
				match(LR_BRACKET);
				setState(1027);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,151,_ctx) ) {
				case 1:
					{
					setState(1025);
					stringLiteral();
					}
					break;
				case 2:
					{
					setState(1026);
					expression(0);
					}
					break;
				}
				setState(1029);
				match(FROM);
				setState(1032);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,152,_ctx) ) {
				case 1:
					{
					setState(1030);
					decimalLiteral();
					}
					break;
				case 2:
					{
					setState(1031);
					expression(0);
					}
					break;
				}
				setState(1039);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(1034);
					match(FOR);
					setState(1037);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
					case 1:
						{
						setState(1035);
						decimalLiteral();
						}
						break;
					case 2:
						{
						setState(1036);
						expression(0);
						}
						break;
					}
					}
				}

				setState(1041);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1043);
				match(TRIM);
				setState(1044);
				match(LR_BRACKET);
				setState(1045);
				_la = _input.LA(1);
				if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1048);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,155,_ctx) ) {
				case 1:
					{
					setState(1046);
					stringLiteral();
					}
					break;
				case 2:
					{
					setState(1047);
					expression(0);
					}
					break;
				}
				setState(1050);
				match(FROM);
				setState(1053);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
				case 1:
					{
					setState(1051);
					stringLiteral();
					}
					break;
				case 2:
					{
					setState(1052);
					expression(0);
					}
					break;
				}
				setState(1055);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1057);
				match(TRIM);
				setState(1058);
				match(LR_BRACKET);
				setState(1061);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
				case 1:
					{
					setState(1059);
					stringLiteral();
					}
					break;
				case 2:
					{
					setState(1060);
					expression(0);
					}
					break;
				}
				setState(1063);
				match(FROM);
				setState(1066);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
				case 1:
					{
					setState(1064);
					stringLiteral();
					}
					break;
				case 2:
					{
					setState(1065);
					expression(0);
					}
					break;
				}
				setState(1068);
				match(RR_BRACKET);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1070);
				_la = _input.LA(1);
				if ( !(_la==CURRENT_USER || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (CURRENT_DATE - 225)) | (1L << (CURRENT_TIME - 225)) | (1L << (CURRENT_TIMESTAMP - 225)) | (1L << (LOCALTIME - 225)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1071);
				match(VALUES);
				setState(1072);
				match(LR_BRACKET);
				setState(1073);
				idSubId();
				setState(1074);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateFunctionContext extends ParserRuleContext {
		public Token aggregator;
		public Token separator;
		public FunctionParameterContext functionParameter() {
			return getRuleContext(FunctionParameterContext.class,0);
		}
		public TerminalNode AVG() { return getToken(MySqlParser.AVG, 0); }
		public TerminalNode MAX() { return getToken(MySqlParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(MySqlParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(MySqlParser.SUM, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public FunctionParametersContext functionParameters() {
			return getRuleContext(FunctionParametersContext.class,0);
		}
		public TerminalNode BIT_AND() { return getToken(MySqlParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(MySqlParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(MySqlParser.BIT_XOR, 0); }
		public TerminalNode STD() { return getToken(MySqlParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(MySqlParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(MySqlParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(MySqlParser.STDDEV_SAMP, 0); }
		public TerminalNode VAR_POP() { return getToken(MySqlParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(MySqlParser.VAR_SAMP, 0); }
		public TerminalNode VARIANCE() { return getToken(MySqlParser.VARIANCE, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(MySqlParser.GROUP_CONCAT, 0); }
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public TerminalNode SEPARATOR() { return getToken(MySqlParser.SEPARATOR, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public AggregateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAggregateFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAggregateFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAggregateFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateFunctionContext aggregateFunction() throws RecognitionException {
		AggregateFunctionContext _localctx = new AggregateFunctionContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_aggregateFunction);
		int _la;
		try {
			setState(1134);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,168,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1078);
				_la = _input.LA(1);
				if ( !(((((_la - 209)) & ~0x3f) == 0 && ((1L << (_la - 209)) & ((1L << (AVG - 209)) | (1L << (MAX - 209)) | (1L << (MIN - 209)) | (1L << (SUM - 209)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1079);
				match(LR_BRACKET);
				setState(1081);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(1080);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1083);
				functionParameter();
				setState(1084);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1086);
				match(COUNT);
				setState(1087);
				match(LR_BRACKET);
				setState(1093);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STAR:
					{
					setState(1088);
					match(STAR);
					}
					break;
				case ALL:
				case CURRENT_USER:
				case EXISTS:
				case FALSE:
				case INTERVAL:
				case NOT:
				case NULL_LITERAL:
				case SET:
				case TRUE:
				case VALUES:
				case TINYINT:
				case SMALLINT:
				case MEDIUMINT:
				case INT:
				case INTEGER:
				case BIGINT:
				case REAL:
				case DOUBLE:
				case FLOAT:
				case DECIMAL:
				case NUMERIC:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case CHAR:
				case VARCHAR:
				case BINARY:
				case VARBINARY:
				case TINYBLOB:
				case BLOB:
				case MEDIUMBLOB:
				case LONGBLOB:
				case TINYTEXT:
				case TEXT:
				case MEDIUMTEXT:
				case LONGTEXT:
				case ENUM:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case SUBSTR:
				case SUBSTRING:
				case TRIM:
				case BIT:
				case BOOL:
				case BOOLEAN:
				case ROW:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case PLUS:
				case MINUS:
				case EXCLAMATION_SYMBOL:
				case BIT_NOT_OP:
				case LR_BRACKET:
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case START_NATIONAL_STRING_LITERAL:
				case STRING_LITERAL:
				case DECIMAL_LITERAL:
				case HEXADECIMAL_LITERAL:
				case REAL_LITERAL:
				case BIT_STRING:
				case STRING_CHARSET_NAME:
				case ID:
				case LOCAL_ID:
					{
					setState(1090);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL) {
						{
						setState(1089);
						match(ALL);
						}
					}

					setState(1092);
					functionParameter();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1095);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1096);
				match(COUNT);
				setState(1097);
				match(LR_BRACKET);
				setState(1098);
				match(DISTINCT);
				setState(1099);
				functionParameters();
				setState(1100);
				match(RR_BRACKET);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1102);
				_la = _input.LA(1);
				if ( !(((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (BIT_AND - 210)) | (1L << (BIT_OR - 210)) | (1L << (BIT_XOR - 210)) | (1L << (STD - 210)) | (1L << (STDDEV - 210)) | (1L << (STDDEV_POP - 210)) | (1L << (STDDEV_SAMP - 210)) | (1L << (VAR_POP - 210)) | (1L << (VAR_SAMP - 210)) | (1L << (VARIANCE - 210)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1103);
				match(LR_BRACKET);
				setState(1105);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(1104);
					match(ALL);
					}
				}

				setState(1107);
				functionParameter();
				setState(1108);
				match(RR_BRACKET);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1110);
				match(GROUP_CONCAT);
				setState(1111);
				match(LR_BRACKET);
				setState(1113);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DISTINCT) {
					{
					setState(1112);
					((AggregateFunctionContext)_localctx).aggregator = match(DISTINCT);
					}
				}

				setState(1115);
				functionParameters();
				setState(1126);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(1116);
					match(ORDER);
					setState(1117);
					match(BY);
					setState(1118);
					orderByExpression();
					setState(1123);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1119);
						match(COMMA);
						setState(1120);
						orderByExpression();
						}
						}
						setState(1125);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1130);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEPARATOR) {
					{
					setState(1128);
					match(SEPARATOR);
					setState(1129);
					((AggregateFunctionContext)_localctx).separator = match(STRING_LITERAL);
					}
				}

				setState(1132);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionParameterContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public IdSubIdContext idSubId() {
			return getRuleContext(IdSubIdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunctionParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionParameterContext functionParameter() throws RecognitionException {
		FunctionParameterContext _localctx = new FunctionParameterContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_functionParameter);
		try {
			setState(1139);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,169,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1136);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1137);
				idSubId();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1138);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionParametersContext extends ParserRuleContext {
		public List<FunctionParameterContext> functionParameter() {
			return getRuleContexts(FunctionParameterContext.class);
		}
		public FunctionParameterContext functionParameter(int i) {
			return getRuleContext(FunctionParameterContext.class,i);
		}
		public FunctionParametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionParameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionParameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionParameters(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunctionParameters(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionParametersContext functionParameters() throws RecognitionException {
		FunctionParametersContext _localctx = new FunctionParametersContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_functionParameters);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1141);
			functionParameter();
			setState(1146);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1142);
				match(COMMA);
				setState(1143);
				functionParameter();
				}
				}
				setState(1148);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnaryOperatorContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unaryOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnaryOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnaryOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnaryOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnaryOperatorContext unaryOperator() throws RecognitionException {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_unaryOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1149);
			_la = _input.LA(1);
			if ( !(_la==NOT || ((((_la - 931)) & ~0x3f) == 0 && ((1L << (_la - 931)) & ((1L << (PLUS - 931)) | (1L << (MINUS - 931)) | (1L << (EXCLAMATION_SYMBOL - 931)) | (1L << (BIT_NOT_OP - 931)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonOperatorContext extends ParserRuleContext {
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitComparisonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_comparisonOperator);
		try {
			setState(1165);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1151);
				match(EQUAL_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1152);
				match(GREATER_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1153);
				match(LESS_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1154);
				match(LESS_SYMBOL);
				setState(1155);
				match(EQUAL_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1156);
				match(GREATER_SYMBOL);
				setState(1157);
				match(EQUAL_SYMBOL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1158);
				match(LESS_SYMBOL);
				setState(1159);
				match(GREATER_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1160);
				match(EXCLAMATION_SYMBOL);
				setState(1161);
				match(EQUAL_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1162);
				match(LESS_SYMBOL);
				setState(1163);
				match(EQUAL_SYMBOL);
				setState(1164);
				match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogicalOperatorContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public TerminalNode XOR() { return getToken(MySqlParser.XOR, 0); }
		public TerminalNode OR() { return getToken(MySqlParser.OR, 0); }
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logicalOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLogicalOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLogicalOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLogicalOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogicalOperatorContext logicalOperator() throws RecognitionException {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_logicalOperator);
		try {
			setState(1174);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
				enterOuterAlt(_localctx, 1);
				{
				setState(1167);
				match(AND);
				}
				break;
			case XOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(1168);
				match(XOR);
				}
				break;
			case OR:
				enterOuterAlt(_localctx, 3);
				{
				setState(1169);
				match(OR);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 4);
				{
				setState(1170);
				match(BIT_AND_OP);
				setState(1171);
				match(BIT_AND_OP);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(1172);
				match(BIT_OR_OP);
				setState(1173);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitOperatorContext extends ParserRuleContext {
		public BitOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBitOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBitOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBitOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitOperatorContext bitOperator() throws RecognitionException {
		BitOperatorContext _localctx = new BitOperatorContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_bitOperator);
		try {
			setState(1183);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LESS_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1176);
				match(LESS_SYMBOL);
				setState(1177);
				match(LESS_SYMBOL);
				}
				break;
			case GREATER_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1178);
				match(GREATER_SYMBOL);
				setState(1179);
				match(GREATER_SYMBOL);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 3);
				{
				setState(1180);
				match(BIT_AND_OP);
				}
				break;
			case BIT_XOR_OP:
				enterOuterAlt(_localctx, 4);
				{
				setState(1181);
				match(BIT_XOR_OP);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(1182);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MathOperatorContext extends ParserRuleContext {
		public TerminalNode DIV() { return getToken(MySqlParser.DIV, 0); }
		public TerminalNode MOD() { return getToken(MySqlParser.MOD, 0); }
		public MathOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMathOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMathOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMathOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MathOperatorContext mathOperator() throws RecognitionException {
		MathOperatorContext _localctx = new MathOperatorContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_mathOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1185);
			_la = _input.LA(1);
			if ( !(((((_la - 928)) & ~0x3f) == 0 && ((1L << (_la - 928)) & ((1L << (STAR - 928)) | (1L << (DIVIDE - 928)) | (1L << (MODULE - 928)) | (1L << (PLUS - 928)) | (1L << (MINUSMINUS - 928)) | (1L << (MINUS - 928)) | (1L << (DIV - 928)) | (1L << (MOD - 928)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public IdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdContext id() throws RecognitionException {
		IdContext _localctx = new IdContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_id);

		        // System.out.println("[Rule: id]");
		    
		try {
			setState(1190);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1187);
				match(ID);
				}
				break;
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
				enterOuterAlt(_localctx, 2);
				{
				setState(1188);
				intervalType();
				}
				break;
			case SET:
			case TINYINT:
			case SMALLINT:
			case MEDIUMINT:
			case INT:
			case INTEGER:
			case BIGINT:
			case REAL:
			case DOUBLE:
			case FLOAT:
			case DECIMAL:
			case NUMERIC:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case CHAR:
			case VARCHAR:
			case BINARY:
			case VARBINARY:
			case TINYBLOB:
			case BLOB:
			case MEDIUMBLOB:
			case LONGBLOB:
			case TINYTEXT:
			case TEXT:
			case MEDIUMTEXT:
			case LONGTEXT:
			case ENUM:
			case BIT:
			case BOOL:
			case BOOLEAN:
				enterOuterAlt(_localctx, 3);
				{
				setState(1189);
				dataType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdsContext extends ParserRuleContext {
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public IdsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ids; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIds(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdsContext ids() throws RecognitionException {
		IdsContext _localctx = new IdsContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_ids);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1192);
			id();
			setState(1197);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1193);
				match(COMMA);
				setState(1194);
				id();
				}
				}
				setState(1199);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubIdContext extends ParserRuleContext {
		public TerminalNode DOT_ID() { return getToken(MySqlParser.DOT_ID, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public SubIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubIdContext subId() throws RecognitionException {
		SubIdContext _localctx = new SubIdContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_subId);
		try {
			setState(1203);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOT_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1200);
				match(DOT_ID);
				}
				break;
			case DOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1201);
				match(DOT);
				setState(1202);
				id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdSubIdContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<SubIdContext> subId() {
			return getRuleContexts(SubIdContext.class);
		}
		public SubIdContext subId(int i) {
			return getRuleContext(SubIdContext.class,i);
		}
		public IdSubIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_idSubId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIdSubId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIdSubId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIdSubId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdSubIdContext idSubId() throws RecognitionException {
		IdSubIdContext _localctx = new IdSubIdContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_idSubId);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1205);
			id();
			setState(1210);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,178,_ctx) ) {
			case 1:
				{
				setState(1206);
				subId();
				setState(1208);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,177,_ctx) ) {
				case 1:
					{
					setState(1207);
					subId();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultValueContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(MySqlParser.LOCALTIMESTAMP, 0); }
		public DefaultValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefaultValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefaultValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDefaultValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultValueContext defaultValue() throws RecognitionException {
		DefaultValueContext _localctx = new DefaultValueContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_defaultValue);
		int _la;
		try {
			setState(1220);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,180,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1212);
				match(NULL_LITERAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1213);
				constant();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1214);
				match(CURRENT_TIMESTAMP);
				setState(1218);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(1215);
					match(ON);
					setState(1216);
					match(UPDATE);
					setState(1217);
					match(LOCALTIMESTAMP);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullOrNotNullContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public NullOrNotNullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullOrNotNull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNullOrNotNull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNullOrNotNull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNullOrNotNull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullOrNotNullContext nullOrNotNull() throws RecognitionException {
		NullOrNotNullContext _localctx = new NullOrNotNullContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_nullOrNotNull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1223);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1222);
				match(NOT);
				}
			}

			setState(1225);
			match(NULL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeContext extends ParserRuleContext {
		public TerminalNode MONTH() { return getToken(MySqlParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(MySqlParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(MySqlParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(MySqlParser.MINUTE, 0); }
		public TerminalNode WEEK() { return getToken(MySqlParser.WEEK, 0); }
		public TerminalNode SECOND() { return getToken(MySqlParser.SECOND, 0); }
		public TerminalNode MICROSECOND() { return getToken(MySqlParser.MICROSECOND, 0); }
		public IntervalTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIntervalType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalTypeContext intervalType() throws RecognitionException {
		IntervalTypeContext _localctx = new IntervalTypeContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_intervalType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1227);
			_la = _input.LA(1);
			if ( !(((((_la - 551)) & ~0x3f) == 0 && ((1L << (_la - 551)) & ((1L << (MONTH - 551)) | (1L << (DAY - 551)) | (1L << (HOUR - 551)) | (1L << (MINUTE - 551)) | (1L << (WEEK - 551)) | (1L << (SECOND - 551)) | (1L << (MICROSECOND - 551)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode VARCHAR() { return getToken(MySqlParser.VARCHAR, 0); }
		public TerminalNode TINYTEXT() { return getToken(MySqlParser.TINYTEXT, 0); }
		public TerminalNode TEXT() { return getToken(MySqlParser.TEXT, 0); }
		public TerminalNode MEDIUMTEXT() { return getToken(MySqlParser.MEDIUMTEXT, 0); }
		public TerminalNode LONGTEXT() { return getToken(MySqlParser.LONGTEXT, 0); }
		public LengthContext length() {
			return getRuleContext(LengthContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode INT() { return getToken(MySqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(MySqlParser.INTEGER, 0); }
		public TerminalNode BIGINT() { return getToken(MySqlParser.BIGINT, 0); }
		public TerminalNode TINYINT() { return getToken(MySqlParser.TINYINT, 0); }
		public TerminalNode SMALLINT() { return getToken(MySqlParser.SMALLINT, 0); }
		public TerminalNode MEDIUMINT() { return getToken(MySqlParser.MEDIUMINT, 0); }
		public TerminalNode UNSIGNED() { return getToken(MySqlParser.UNSIGNED, 0); }
		public TerminalNode ZEROFILL() { return getToken(MySqlParser.ZEROFILL, 0); }
		public TerminalNode REAL() { return getToken(MySqlParser.REAL, 0); }
		public TerminalNode DOUBLE() { return getToken(MySqlParser.DOUBLE, 0); }
		public TerminalNode FLOAT() { return getToken(MySqlParser.FLOAT, 0); }
		public LengthTwoDimensionContext lengthTwoDimension() {
			return getRuleContext(LengthTwoDimensionContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(MySqlParser.DECIMAL, 0); }
		public TerminalNode NUMERIC() { return getToken(MySqlParser.NUMERIC, 0); }
		public LengthTwoDimensionOptionalContext lengthTwoDimensionOptional() {
			return getRuleContext(LengthTwoDimensionOptionalContext.class,0);
		}
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode TINYBLOB() { return getToken(MySqlParser.TINYBLOB, 0); }
		public TerminalNode BLOB() { return getToken(MySqlParser.BLOB, 0); }
		public TerminalNode MEDIUMBLOB() { return getToken(MySqlParser.MEDIUMBLOB, 0); }
		public TerminalNode LONGBLOB() { return getToken(MySqlParser.LONGBLOB, 0); }
		public TerminalNode BOOL() { return getToken(MySqlParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(MySqlParser.BOOLEAN, 0); }
		public TerminalNode BIT() { return getToken(MySqlParser.BIT, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode VARBINARY() { return getToken(MySqlParser.VARBINARY, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode ENUM() { return getToken(MySqlParser.ENUM, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_dataType);
		int _la;
		try {
			setState(1285);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHAR:
			case VARCHAR:
			case TINYTEXT:
			case TEXT:
			case MEDIUMTEXT:
			case LONGTEXT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1229);
				_la = _input.LA(1);
				if ( !(((((_la - 185)) & ~0x3f) == 0 && ((1L << (_la - 185)) & ((1L << (CHAR - 185)) | (1L << (VARCHAR - 185)) | (1L << (TINYTEXT - 185)) | (1L << (TEXT - 185)) | (1L << (MEDIUMTEXT - 185)) | (1L << (LONGTEXT - 185)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1231);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,182,_ctx) ) {
				case 1:
					{
					setState(1230);
					length();
					}
					break;
				}
				setState(1234);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,183,_ctx) ) {
				case 1:
					{
					setState(1233);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case TINYINT:
			case SMALLINT:
			case MEDIUMINT:
			case INT:
			case INTEGER:
			case BIGINT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1236);
				_la = _input.LA(1);
				if ( !(((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (TINYINT - 169)) | (1L << (SMALLINT - 169)) | (1L << (MEDIUMINT - 169)) | (1L << (INT - 169)) | (1L << (INTEGER - 169)) | (1L << (BIGINT - 169)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1238);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,184,_ctx) ) {
				case 1:
					{
					setState(1237);
					length();
					}
					break;
				}
				setState(1241);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,185,_ctx) ) {
				case 1:
					{
					setState(1240);
					match(UNSIGNED);
					}
					break;
				}
				setState(1244);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,186,_ctx) ) {
				case 1:
					{
					setState(1243);
					match(ZEROFILL);
					}
					break;
				}
				}
				break;
			case REAL:
			case DOUBLE:
			case FLOAT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1246);
				_la = _input.LA(1);
				if ( !(((((_la - 175)) & ~0x3f) == 0 && ((1L << (_la - 175)) & ((1L << (REAL - 175)) | (1L << (DOUBLE - 175)) | (1L << (FLOAT - 175)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1248);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,187,_ctx) ) {
				case 1:
					{
					setState(1247);
					lengthTwoDimension();
					}
					break;
				}
				setState(1251);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
				case 1:
					{
					setState(1250);
					match(UNSIGNED);
					}
					break;
				}
				setState(1254);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,189,_ctx) ) {
				case 1:
					{
					setState(1253);
					match(ZEROFILL);
					}
					break;
				}
				}
				break;
			case DECIMAL:
			case NUMERIC:
				enterOuterAlt(_localctx, 4);
				{
				setState(1256);
				_la = _input.LA(1);
				if ( !(_la==DECIMAL || _la==NUMERIC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1258);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
				case 1:
					{
					setState(1257);
					lengthTwoDimensionOptional();
					}
					break;
				}
				setState(1261);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,191,_ctx) ) {
				case 1:
					{
					setState(1260);
					match(UNSIGNED);
					}
					break;
				}
				setState(1264);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,192,_ctx) ) {
				case 1:
					{
					setState(1263);
					match(ZEROFILL);
					}
					break;
				}
				}
				break;
			case DATE:
			case TINYBLOB:
			case BLOB:
			case MEDIUMBLOB:
			case LONGBLOB:
			case BOOL:
			case BOOLEAN:
				enterOuterAlt(_localctx, 5);
				{
				setState(1266);
				_la = _input.LA(1);
				if ( !(((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (DATE - 180)) | (1L << (TINYBLOB - 180)) | (1L << (BLOB - 180)) | (1L << (MEDIUMBLOB - 180)) | (1L << (LONGBLOB - 180)))) != 0) || _la==BOOL || _la==BOOLEAN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case VARBINARY:
			case BIT:
				enterOuterAlt(_localctx, 6);
				{
				setState(1267);
				_la = _input.LA(1);
				if ( !(((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (TIME - 181)) | (1L << (TIMESTAMP - 181)) | (1L << (DATETIME - 181)) | (1L << (YEAR - 181)) | (1L << (BINARY - 181)) | (1L << (VARBINARY - 181)))) != 0) || _la==BIT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1269);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
				case 1:
					{
					setState(1268);
					length();
					}
					break;
				}
				}
				break;
			case SET:
			case ENUM:
				enterOuterAlt(_localctx, 7);
				{
				setState(1271);
				_la = _input.LA(1);
				if ( !(_la==SET || _la==ENUM) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1272);
				match(LR_BRACKET);
				setState(1273);
				match(STRING_LITERAL);
				setState(1278);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1274);
					match(COMMA);
					setState(1275);
					match(STRING_LITERAL);
					}
					}
					setState(1280);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1281);
				match(RR_BRACKET);
				setState(1283);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,195,_ctx) ) {
				case 1:
					{
					setState(1282);
					match(BINARY);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthContext extends ParserRuleContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public LengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_length; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthContext length() throws RecognitionException {
		LengthContext _localctx = new LengthContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_length);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1287);
			match(LR_BRACKET);
			setState(1288);
			decimalLiteral();
			setState(1289);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoDimensionContext extends ParserRuleContext {
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public LengthTwoDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLengthTwoDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLengthTwoDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLengthTwoDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthTwoDimensionContext lengthTwoDimension() throws RecognitionException {
		LengthTwoDimensionContext _localctx = new LengthTwoDimensionContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_lengthTwoDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1291);
			match(LR_BRACKET);
			setState(1292);
			decimalLiteral();
			setState(1293);
			match(COMMA);
			setState(1294);
			decimalLiteral();
			setState(1295);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoDimensionOptionalContext extends ParserRuleContext {
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public LengthTwoDimensionOptionalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoDimensionOptional; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLengthTwoDimensionOptional(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLengthTwoDimensionOptional(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLengthTwoDimensionOptional(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthTwoDimensionOptionalContext lengthTwoDimensionOptional() throws RecognitionException {
		LengthTwoDimensionOptionalContext _localctx = new LengthTwoDimensionOptionalContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_lengthTwoDimensionOptional);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1297);
			match(LR_BRACKET);
			setState(1298);
			decimalLiteral();
			setState(1301);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(1299);
				match(COMMA);
				setState(1300);
				decimalLiteral();
				}
			}

			setState(1303);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIfExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIfExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIfExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfExistsContext ifExists() throws RecognitionException {
		IfExistsContext _localctx = new IfExistsContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_ifExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1305);
			match(IF);
			setState(1306);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfNotExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifNotExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIfNotExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIfNotExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIfNotExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfNotExistsContext ifNotExists() throws RecognitionException {
		IfNotExistsContext _localctx = new IfNotExistsContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_ifNotExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1308);
			match(IF);
			setState(1309);
			match(NOT);
			setState(1310);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 40:
			return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 42:
			return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 43:
			return expressionAtom_sempred((ExpressionAtomContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 7);
		case 2:
			return precpred(_ctx, 5);
		case 3:
			return precpred(_ctx, 4);
		case 4:
			return precpred(_ctx, 2);
		case 5:
			return precpred(_ctx, 9);
		case 6:
			return precpred(_ctx, 8);
		case 7:
			return precpred(_ctx, 6);
		case 8:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean expressionAtom_sempred(ExpressionAtomContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9:
			return precpred(_ctx, 2);
		case 10:
			return precpred(_ctx, 1);
		}
		return true;
	}

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u03cf\u0523\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\3\2\3\2\3\2\7\2\u009c\n\2\f\2\16\2\u009f\13\2\3"+
		"\2\3\2\7\2\u00a3\n\2\f\2\16\2\u00a6\13\2\3\2\5\2\u00a9\n\2\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u00b7\n\3\3\4\3\4\3\4\3\5\3\5"+
		"\3\5\5\5\u00bf\n\5\3\5\3\5\3\6\3\6\3\6\5\6\u00c6\n\6\3\6\3\6\3\7\3\7\3"+
		"\7\5\7\u00cd\n\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u00d5\n\7\3\7\3\7\3\7\3\7"+
		"\5\7\u00db\n\7\3\7\3\7\5\7\u00df\n\7\3\b\3\b\5\b\u00e3\n\b\3\b\3\b\5\b"+
		"\u00e7\n\b\3\b\3\b\3\b\5\b\u00ec\n\b\3\b\3\b\5\b\u00f0\n\b\3\b\3\b\5\b"+
		"\u00f4\n\b\3\b\3\b\3\b\3\b\3\b\7\b\u00fb\n\b\f\b\16\b\u00fe\13\b\3\b\3"+
		"\b\5\b\u0102\n\b\3\t\3\t\3\t\7\t\u0107\n\t\f\t\16\t\u010a\13\t\3\t\3\t"+
		"\5\t\u010e\n\t\3\n\3\n\3\n\3\n\3\n\5\n\u0115\n\n\3\n\3\n\3\n\5\n\u011a"+
		"\n\n\3\n\3\n\3\n\5\n\u011f\n\n\3\13\3\13\5\13\u0123\n\13\5\13\u0125\n"+
		"\13\3\13\3\13\3\13\5\13\u012a\n\13\3\13\3\13\7\13\u012e\n\13\f\13\16\13"+
		"\u0131\13\13\3\13\3\13\5\13\u0135\n\13\5\13\u0137\n\13\3\13\3\13\5\13"+
		"\u013b\n\13\3\13\5\13\u013e\n\13\3\13\5\13\u0141\n\13\3\13\3\13\7\13\u0145"+
		"\n\13\f\13\16\13\u0148\13\13\3\13\3\13\5\13\u014c\n\13\5\13\u014e\n\13"+
		"\3\13\3\13\3\13\5\13\u0153\n\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\5\13\u015d\n\13\3\f\3\f\3\f\3\f\3\f\5\f\u0164\n\f\3\f\5\f\u0167\n\f\3"+
		"\r\3\r\3\r\3\r\3\r\3\r\5\r\u016f\n\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0177"+
		"\n\r\5\r\u0179\n\r\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u0181\n\16\3\17"+
		"\3\17\5\17\u0185\n\17\3\17\5\17\u0188\n\17\3\17\3\17\7\17\u018c\n\17\f"+
		"\17\16\17\u018f\13\17\3\17\3\17\5\17\u0193\n\17\3\17\5\17\u0196\n\17\3"+
		"\17\3\17\7\17\u019a\n\17\f\17\16\17\u019d\13\17\5\17\u019f\n\17\3\20\3"+
		"\20\3\20\3\20\7\20\u01a5\n\20\f\20\16\20\u01a8\13\20\3\20\3\20\3\21\3"+
		"\21\3\21\3\21\3\21\5\21\u01b1\n\21\3\21\5\21\u01b4\n\21\3\22\3\22\5\22"+
		"\u01b8\n\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u01c1\n\22\3\23\3"+
		"\23\5\23\u01c5\n\23\3\23\3\23\5\23\u01c9\n\23\3\23\3\23\5\23\u01cd\n\23"+
		"\3\24\3\24\3\24\3\24\3\24\7\24\u01d4\n\24\f\24\16\24\u01d7\13\24\3\25"+
		"\3\25\3\25\3\25\3\26\3\26\7\26\u01df\n\26\f\26\16\26\u01e2\13\26\3\26"+
		"\3\26\5\26\u01e6\n\26\3\26\5\26\u01e9\n\26\3\26\5\26\u01ec\n\26\3\26\5"+
		"\26\u01ef\n\26\3\26\3\26\7\26\u01f3\n\26\f\26\16\26\u01f6\13\26\3\26\3"+
		"\26\5\26\u01fa\n\26\3\26\5\26\u01fd\n\26\3\26\5\26\u0200\n\26\3\26\5\26"+
		"\u0203\n\26\5\26\u0205\n\26\3\27\3\27\3\30\3\30\5\30\u020b\n\30\3\30\3"+
		"\30\7\30\u020f\n\30\f\30\16\30\u0212\13\30\3\31\3\31\5\31\u0216\n\31\3"+
		"\31\5\31\u0219\n\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u0221\n\31\3\31"+
		"\3\31\5\31\u0225\n\31\3\31\5\31\u0228\n\31\5\31\u022a\n\31\3\32\3\32\3"+
		"\32\3\32\7\32\u0230\n\32\f\32\16\32\u0233\13\32\3\32\3\32\3\32\5\32\u0238"+
		"\n\32\3\33\3\33\3\33\3\33\5\33\u023e\n\33\3\33\3\33\3\33\3\33\3\33\7\33"+
		"\u0245\n\33\f\33\16\33\u0248\13\33\3\33\3\33\5\33\u024c\n\33\5\33\u024e"+
		"\n\33\3\33\3\33\5\33\u0252\n\33\3\34\3\34\3\34\7\34\u0257\n\34\f\34\16"+
		"\34\u025a\13\34\3\35\3\35\7\35\u025e\n\35\f\35\16\35\u0261\13\35\3\35"+
		"\3\35\3\35\7\35\u0266\n\35\f\35\16\35\u0269\13\35\3\35\3\35\5\35\u026d"+
		"\n\35\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u0275\n\36\3\36\5\36\u0278\n"+
		"\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u0280\n\36\3\37\5\37\u0283\n\37"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u028e\n\37\3\37\3\37"+
		"\3\37\3\37\5\37\u0294\n\37\3\37\3\37\5\37\u0298\n\37\3\37\3\37\3\37\3"+
		"\37\3\37\3\37\3\37\3\37\3\37\5\37\u02a3\n\37\3\37\3\37\3\37\5\37\u02a8"+
		"\n\37\5\37\u02aa\n\37\3\37\3\37\5\37\u02ae\n\37\3 \3 \3 \3 \3 \7 \u02b5"+
		"\n \f \16 \u02b8\13 \3!\3!\3!\3!\3!\3\"\3\"\5\"\u02c1\n\"\3#\3#\5#\u02c5"+
		"\n#\3$\3$\5$\u02c9\n$\3$\5$\u02cc\n$\3$\3$\3$\3$\3$\5$\u02d3\n$\3$\3$"+
		"\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\7%\u02e1\n%\f%\16%\u02e4\13%\5%\u02e6\n"+
		"%\3&\3&\5&\u02ea\n&\3&\3&\5&\u02ee\n&\3&\5&\u02f1\n&\3&\3&\3&\3&\7&\u02f7"+
		"\n&\f&\16&\u02fa\13&\3&\3&\5&\u02fe\n&\3&\5&\u0301\n&\3&\5&\u0304\n&\3"+
		"\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\5(\u030f\n(\3(\5(\u0312\n(\3(\3(\5(\u0316"+
		"\n(\3)\3)\5)\u031a\n)\3)\3)\3)\3)\3)\5)\u0321\n)\3)\3)\3)\5)\u0326\n)"+
		"\3*\3*\3*\3*\3*\3*\5*\u032e\n*\3*\3*\3*\5*\u0333\n*\3*\3*\3*\3*\7*\u0339"+
		"\n*\f*\16*\u033c\13*\3+\3+\3+\7+\u0341\n+\f+\16+\u0344\13+\3,\3,\3,\5"+
		",\u0349\n,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u0353\n,\3,\3,\3,\3,\3,\3,\3,\3"+
		",\3,\3,\3,\5,\u0360\n,\3,\3,\3,\3,\5,\u0366\n,\3,\3,\3,\3,\5,\u036c\n"+
		",\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u037c\n,\3,\3,\3,\3,\5"+
		",\u0382\n,\7,\u0384\n,\f,\16,\u0387\13,\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-"+
		"\3-\3-\3-\7-\u0396\n-\f-\16-\u0399\13-\3-\3-\3-\3-\3-\3-\3-\6-\u03a2\n"+
		"-\r-\16-\u03a3\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\5-\u03b5\n"+
		"-\3-\3-\3-\3-\3-\3-\3-\3-\7-\u03bf\n-\f-\16-\u03c2\13-\3.\3.\5.\u03c6"+
		"\n.\3/\3/\3/\7/\u03cb\n/\f/\16/\u03ce\13/\3\60\3\60\3\60\3\60\3\60\3\60"+
		"\3\60\5\60\u03d7\n\60\3\60\5\60\u03da\n\60\3\61\5\61\u03dd\n\61\3\61\3"+
		"\61\5\61\u03e1\n\61\3\61\6\61\u03e4\n\61\r\61\16\61\u03e5\3\61\5\61\u03e9"+
		"\n\61\3\61\3\61\5\61\u03ed\n\61\5\61\u03ef\n\61\3\62\3\62\3\63\3\63\5"+
		"\63\u03f5\n\63\3\64\5\64\u03f8\n\64\3\64\3\64\3\65\3\65\3\66\3\66\5\66"+
		"\u0400\n\66\3\67\3\67\3\67\3\67\5\67\u0406\n\67\3\67\3\67\3\67\5\67\u040b"+
		"\n\67\3\67\3\67\3\67\5\67\u0410\n\67\5\67\u0412\n\67\3\67\3\67\3\67\3"+
		"\67\3\67\3\67\3\67\5\67\u041b\n\67\3\67\3\67\3\67\5\67\u0420\n\67\3\67"+
		"\3\67\3\67\3\67\3\67\3\67\5\67\u0428\n\67\3\67\3\67\3\67\5\67\u042d\n"+
		"\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\5\67\u0437\n\67\38\38\38\5"+
		"8\u043c\n8\38\38\38\38\38\38\38\58\u0445\n8\38\58\u0448\n8\38\38\38\3"+
		"8\38\38\38\38\38\38\58\u0454\n8\38\38\38\38\38\38\58\u045c\n8\38\38\3"+
		"8\38\38\38\78\u0464\n8\f8\168\u0467\138\58\u0469\n8\38\38\58\u046d\n8"+
		"\38\38\58\u0471\n8\39\39\39\59\u0476\n9\3:\3:\3:\7:\u047b\n:\f:\16:\u047e"+
		"\13:\3;\3;\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\5<\u0490\n<\3=\3"+
		"=\3=\3=\3=\3=\3=\5=\u0499\n=\3>\3>\3>\3>\3>\3>\3>\5>\u04a2\n>\3?\3?\3"+
		"@\3@\3@\5@\u04a9\n@\3A\3A\3A\7A\u04ae\nA\fA\16A\u04b1\13A\3B\3B\3B\5B"+
		"\u04b6\nB\3C\3C\3C\5C\u04bb\nC\5C\u04bd\nC\3D\3D\3D\3D\3D\3D\5D\u04c5"+
		"\nD\5D\u04c7\nD\3E\5E\u04ca\nE\3E\3E\3F\3F\3G\3G\5G\u04d2\nG\3G\5G\u04d5"+
		"\nG\3G\3G\5G\u04d9\nG\3G\5G\u04dc\nG\3G\5G\u04df\nG\3G\3G\5G\u04e3\nG"+
		"\3G\5G\u04e6\nG\3G\5G\u04e9\nG\3G\3G\5G\u04ed\nG\3G\5G\u04f0\nG\3G\5G"+
		"\u04f3\nG\3G\3G\3G\5G\u04f8\nG\3G\3G\3G\3G\3G\7G\u04ff\nG\fG\16G\u0502"+
		"\13G\3G\3G\5G\u0506\nG\5G\u0508\nG\3H\3H\3H\3H\3I\3I\3I\3I\3I\3I\3J\3"+
		"J\3J\3J\5J\u0518\nJ\3J\3J\3K\3K\3K\3L\3L\3L\3L\3L\2\5RVXM\2\4\6\b\n\f"+
		"\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^"+
		"`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090"+
		"\u0092\u0094\u0096\2#\4\2##\u0082\u0082\4\2\u010a\u010a\u0172\u0172\4"+
		"\2EEOO\5\2\u0150\u0150\u01af\u01af\u01e6\u01e6\4\2==\u0088\u0088\4\2\r"+
		"\r))\4\2\23\23}}\4\2\b\b,-\4\2  GG\4\2TT\u0080\u0080\4\2\u00a3\u00a3\u0218"+
		"\u0218\4\2cc\u03ad\u03ad\5\2\67\67\u0099\u0099\u0211\u0211\4\2ww\u0081"+
		"\u0081\5\2\b\b\u00fb\u00fb\u01eb\u01eb\4\2\u03b8\u03ba\u03c3\u03c3\4\2"+
		"\67\67\u0099\u0099\3\2\u00ef\u00f0\5\2\20\20RR\u0097\u0097\4\2!!\u00e3"+
		"\u00e6\5\2\u00d3\u00d3\u00d9\u00da\u00df\u00df\4\2\b\b,,\5\2\u00d4\u00d6"+
		"\u00db\u00de\u00e0\u00e2\6\2cc\u03a5\u03a5\u03a7\u03a7\u03ad\u03ae\3\2"+
		"\u03a2\u03a9\3\2\u0229\u022f\4\2\u00bb\u00bc\u00c3\u00c6\3\2\u00ab\u00b0"+
		"\3\2\u00b1\u00b3\3\2\u00b4\u00b5\5\2\u00b6\u00b6\u00bf\u00c2\u0106\u0107"+
		"\5\2\u00b7\u00ba\u00bd\u00be\u0104\u0104\4\2\u0085\u0085\u00c7\u00c7\2"+
		"\u05e7\2\u00a8\3\2\2\2\4\u00b6\3\2\2\2\6\u00b8\3\2\2\2\b\u00bb\3\2\2\2"+
		"\n\u00c2\3\2\2\2\f\u00c9\3\2\2\2\16\u0101\3\2\2\2\20\u010d\3\2\2\2\22"+
		"\u011e\3\2\2\2\24\u015c\3\2\2\2\26\u015e\3\2\2\2\30\u0178\3\2\2\2\32\u0180"+
		"\3\2\2\2\34\u019e\3\2\2\2\36\u01a0\3\2\2\2 \u01ab\3\2\2\2\"\u01c0\3\2"+
		"\2\2$\u01c2\3\2\2\2&\u01ce\3\2\2\2(\u01d8\3\2\2\2*\u0204\3\2\2\2,\u0206"+
		"\3\2\2\2.\u020a\3\2\2\2\60\u0229\3\2\2\2\62\u0237\3\2\2\2\64\u0239\3\2"+
		"\2\2\66\u0253\3\2\2\28\u026c\3\2\2\2:\u027f\3\2\2\2<\u02ad\3\2\2\2>\u02af"+
		"\3\2\2\2@\u02b9\3\2\2\2B\u02be\3\2\2\2D\u02c2\3\2\2\2F\u02c6\3\2\2\2H"+
		"\u02e5\3\2\2\2J\u02e7\3\2\2\2L\u0305\3\2\2\2N\u0309\3\2\2\2P\u0317\3\2"+
		"\2\2R\u0332\3\2\2\2T\u033d\3\2\2\2V\u0345\3\2\2\2X\u03b4\3\2\2\2Z\u03c5"+
		"\3\2\2\2\\\u03c7\3\2\2\2^\u03d9\3\2\2\2`\u03ee\3\2\2\2b\u03f0\3\2\2\2"+
		"d\u03f4\3\2\2\2f\u03f7\3\2\2\2h\u03fb\3\2\2\2j\u03ff\3\2\2\2l\u0436\3"+
		"\2\2\2n\u0470\3\2\2\2p\u0475\3\2\2\2r\u0477\3\2\2\2t\u047f\3\2\2\2v\u048f"+
		"\3\2\2\2x\u0498\3\2\2\2z\u04a1\3\2\2\2|\u04a3\3\2\2\2~\u04a8\3\2\2\2\u0080"+
		"\u04aa\3\2\2\2\u0082\u04b5\3\2\2\2\u0084\u04b7\3\2\2\2\u0086\u04c6\3\2"+
		"\2\2\u0088\u04c9\3\2\2\2\u008a\u04cd\3\2\2\2\u008c\u0507\3\2\2\2\u008e"+
		"\u0509\3\2\2\2\u0090\u050d\3\2\2\2\u0092\u0513\3\2\2\2\u0094\u051b\3\2"+
		"\2\2\u0096\u051e\3\2\2\2\u0098\u0099\5\4\3\2\u0099\u009a\7\u03b6\2\2\u009a"+
		"\u009c\3\2\2\2\u009b\u0098\3\2\2\2\u009c\u009f\3\2\2\2\u009d\u009b\3\2"+
		"\2\2\u009d\u009e\3\2\2\2\u009e\u00a0\3\2\2\2\u009f\u009d\3\2\2\2\u00a0"+
		"\u00a9\7\2\2\3\u00a1\u00a3\7\u03b6\2\2\u00a2\u00a1\3\2\2\2\u00a3\u00a6"+
		"\3\2\2\2\u00a4\u00a2\3\2\2\2\u00a4\u00a5\3\2\2\2\u00a5\u00a7\3\2\2\2\u00a6"+
		"\u00a4\3\2\2\2\u00a7\u00a9\7\2\2\3\u00a8\u009d\3\2\2\2\u00a8\u00a4\3\2"+
		"\2\2\u00a9\3\3\2\2\2\u00aa\u00b7\5\6\4\2\u00ab\u00b7\5\b\5\2\u00ac\u00b7"+
		"\5\n\6\2\u00ad\u00b7\5\f\7\2\u00ae\u00b7\5\16\b\2\u00af\u00b7\5$\23\2"+
		"\u00b0\u00b7\5&\24\2\u00b1\u00b7\5*\26\2\u00b2\u00b7\5F$\2\u00b3\u00b7"+
		"\5J&\2\u00b4\u00b7\5N(\2\u00b5\u00b7\5P)\2\u00b6\u00aa\3\2\2\2\u00b6\u00ab"+
		"\3\2\2\2\u00b6\u00ac\3\2\2\2\u00b6\u00ad\3\2\2\2\u00b6\u00ae\3\2\2\2\u00b6"+
		"\u00af\3\2\2\2\u00b6\u00b0\3\2\2\2\u00b6\u00b1\3\2\2\2\u00b6\u00b2\3\2"+
		"\2\2\u00b6\u00b3\3\2\2\2\u00b6\u00b4\3\2\2\2\u00b6\u00b5\3\2\2\2\u00b7"+
		"\5\3\2\2\2\u00b8\u00b9\7\u00a1\2\2\u00b9\u00ba\5~@\2\u00ba\7\3\2\2\2\u00bb"+
		"\u00bc\7\37\2\2\u00bc\u00be\t\2\2\2\u00bd\u00bf\5\u0096L\2\u00be\u00bd"+
		"\3\2\2\2\u00be\u00bf\3\2\2\2\u00bf\u00c0\3\2\2\2\u00c0\u00c1\5~@\2\u00c1"+
		"\t\3\2\2\2\u00c2\u00c3\7.\2\2\u00c3\u00c5\t\2\2\2\u00c4\u00c6\5\u0094"+
		"K\2\u00c5\u00c4\3\2\2\2\u00c5\u00c6\3\2\2\2\u00c6\u00c7\3\2\2\2\u00c7"+
		"\u00c8\5~@\2\u00c8\13\3\2\2\2\u00c9\u00cc\7\37\2\2\u00ca\u00cb\7j\2\2"+
		"\u00cb\u00cd\7{\2\2\u00cc\u00ca\3\2\2\2\u00cc\u00cd\3\2\2\2\u00cd\u00ce"+
		"\3\2\2\2\u00ce\u00cf\7\u021a\2\2\u00cf\u00d4\5~@\2\u00d0\u00d1\7\u03b3"+
		"\2\2\u00d1\u00d2\5\u0080A\2\u00d2\u00d3\7\u03b4\2\2\u00d3\u00d5\3\2\2"+
		"\2\u00d4\u00d0\3\2\2\2\u00d4\u00d5\3\2\2\2\u00d5\u00d6\3\2\2\2\u00d6\u00d7"+
		"\7\f\2\2\u00d7\u00de\5*\26\2\u00d8\u00da\7\u00a7\2\2\u00d9\u00db\t\3\2"+
		"\2\u00da\u00d9\3\2\2\2\u00da\u00db\3\2\2\2\u00db\u00dc\3\2\2\2\u00dc\u00dd"+
		"\7\30\2\2\u00dd\u00df\7h\2\2\u00de\u00d8\3\2\2\2\u00de\u00df\3\2\2\2\u00df"+
		"\r\3\2\2\2\u00e0\u00e2\7\37\2\2\u00e1\u00e3\7\u0206\2\2\u00e2\u00e1\3"+
		"\2\2\2\u00e2\u00e3\3\2\2\2\u00e3\u00e4\3\2\2\2\u00e4\u00e6\7\u0093\2\2"+
		"\u00e5\u00e7\5\u0096L\2\u00e6\u00e5\3\2\2\2\u00e6\u00e7\3\2\2\2\u00e7"+
		"\u00e8\3\2\2\2\u00e8\u00eb\5~@\2\u00e9\u00ea\7U\2\2\u00ea\u00ec\5~@\2"+
		"\u00eb\u00e9\3\2\2\2\u00eb\u00ec\3\2\2\2\u00ec\u0102\3\2\2\2\u00ed\u00ef"+
		"\7\37\2\2\u00ee\u00f0\7\u0206\2\2\u00ef\u00ee\3\2\2\2\u00ef\u00f0\3\2"+
		"\2\2\u00f0\u00f1\3\2\2\2\u00f1\u00f3\7\u0093\2\2\u00f2\u00f4\5\u0096L"+
		"\2\u00f3\u00f2\3\2\2\2\u00f3\u00f4\3\2\2\2\u00f4\u00f5\3\2\2\2\u00f5\u00f6"+
		"\5~@\2\u00f6\u00f7\7\u03b3\2\2\u00f7\u00fc\5\20\t\2\u00f8\u00f9\7\u03b5"+
		"\2\2\u00f9\u00fb\5\20\t\2\u00fa\u00f8\3\2\2\2\u00fb\u00fe\3\2\2\2\u00fc"+
		"\u00fa\3\2\2\2\u00fc\u00fd\3\2\2\2\u00fd\u00ff\3\2\2\2\u00fe\u00fc\3\2"+
		"\2\2\u00ff\u0100\7\u03b4\2\2\u0100\u0102\3\2\2\2\u0101\u00e0\3\2\2\2\u0101"+
		"\u00ed\3\2\2\2\u0102\17\3\2\2\2\u0103\u0104\5~@\2\u0104\u0108\5\u008c"+
		"G\2\u0105\u0107\5\22\n\2\u0106\u0105\3\2\2\2\u0107\u010a\3\2\2\2\u0108"+
		"\u0106\3\2\2\2\u0108\u0109\3\2\2\2\u0109\u010e\3\2\2\2\u010a\u0108\3\2"+
		"\2\2\u010b\u010e\5\24\13\2\u010c\u010e\5\34\17\2\u010d\u0103\3\2\2\2\u010d"+
		"\u010b\3\2\2\2\u010d\u010c\3\2\2\2\u010e\21\3\2\2\2\u010f\u011f\5\u0088"+
		"E\2\u0110\u0111\7&\2\2\u0111\u011f\5\u0086D\2\u0112\u011f\7\u0100\2\2"+
		"\u0113\u0115\7p\2\2\u0114\u0113\3\2\2\2\u0114\u0115\3\2\2\2\u0115\u0116"+
		"\3\2\2\2\u0116\u011f\7O\2\2\u0117\u0119\7\u009c\2\2\u0118\u011a\7O\2\2"+
		"\u0119\u0118\3\2\2\2\u0119\u011a\3\2\2\2\u011a\u011f\3\2\2\2\u011b\u011c"+
		"\7\u0116\2\2\u011c\u011f\7\u03c2\2\2\u011d\u011f\5\26\f\2\u011e\u010f"+
		"\3\2\2\2\u011e\u0110\3\2\2\2\u011e\u0112\3\2\2\2\u011e\u0114\3\2\2\2\u011e"+
		"\u0117\3\2\2\2\u011e\u011b\3\2\2\2\u011e\u011d\3\2\2\2\u011f\23\3\2\2"+
		"\2\u0120\u0122\7\34\2\2\u0121\u0123\5~@\2\u0122\u0121\3\2\2\2\u0122\u0123"+
		"\3\2\2\2\u0123\u0125\3\2\2\2\u0124\u0120\3\2\2\2\u0124\u0125\3\2\2\2\u0125"+
		"\u0126\3\2\2\2\u0126\u0127\7p\2\2\u0127\u0129\7O\2\2\u0128\u012a\7\u00a2"+
		"\2\2\u0129\u0128\3\2\2\2\u0129\u012a\3\2\2\2\u012a\u012b\3\2\2\2\u012b"+
		"\u012f\5\36\20\2\u012c\u012e\5\"\22\2\u012d\u012c\3\2\2\2\u012e\u0131"+
		"\3\2\2\2\u012f\u012d\3\2\2\2\u012f\u0130\3\2\2\2\u0130\u015d\3\2\2\2\u0131"+
		"\u012f\3\2\2\2\u0132\u0134\7\34\2\2\u0133\u0135\5~@\2\u0134\u0133\3\2"+
		"\2\2\u0134\u0135\3\2\2\2\u0135\u0137\3\2\2\2\u0136\u0132\3\2\2\2\u0136"+
		"\u0137\3\2\2\2\u0137\u0138\3\2\2\2\u0138\u013a\7\u009c\2\2\u0139\u013b"+
		"\t\4\2\2\u013a\u0139\3\2\2\2\u013a\u013b\3\2\2\2\u013b\u013d\3\2\2\2\u013c"+
		"\u013e\5~@\2\u013d\u013c\3\2\2\2\u013d\u013e\3\2\2\2\u013e\u0140\3\2\2"+
		"\2\u013f\u0141\7\u00a2\2\2\u0140\u013f\3\2\2\2\u0140\u0141\3\2\2\2\u0141"+
		"\u0142\3\2\2\2\u0142\u0146\5\36\20\2\u0143\u0145\5\"\22\2\u0144\u0143"+
		"\3\2\2\2\u0145\u0148\3\2\2\2\u0146\u0144\3\2\2\2\u0146\u0147\3\2\2\2\u0147"+
		"\u015d\3\2\2\2\u0148\u0146\3\2\2\2\u0149\u014b\7\34\2\2\u014a\u014c\5"+
		"~@\2\u014b\u014a\3\2\2\2\u014b\u014c\3\2\2\2\u014c\u014e\3\2\2\2\u014d"+
		"\u0149\3\2\2\2\u014d\u014e\3\2\2\2\u014e\u014f\3\2\2\2\u014f\u0150\7;"+
		"\2\2\u0150\u0152\7O\2\2\u0151\u0153\5~@\2\u0152\u0151\3\2\2\2\u0152\u0153"+
		"\3\2\2\2\u0153\u0154\3\2\2\2\u0154\u0155\5\36\20\2\u0155\u0156\5\26\f"+
		"\2\u0156\u015d\3\2\2\2\u0157\u0158\7\30\2\2\u0158\u0159\7\u03b3\2\2\u0159"+
		"\u015a\5R*\2\u015a\u015b\7\u03b4\2\2\u015b\u015d\3\2\2\2\u015c\u0124\3"+
		"\2\2\2\u015c\u0136\3\2\2\2\u015c\u014d\3\2\2\2\u015c\u0157\3\2\2\2\u015d"+
		"\25\3\2\2\2\u015e\u015f\7v\2\2\u015f\u0160\5\u0084C\2\u0160\u0163\5\36"+
		"\20\2\u0161\u0162\7_\2\2\u0162\u0164\t\5\2\2\u0163\u0161\3\2\2\2\u0163"+
		"\u0164\3\2\2\2\u0164\u0166\3\2\2\2\u0165\u0167\5\30\r\2\u0166\u0165\3"+
		"\2\2\2\u0166\u0167\3\2\2\2\u0167\27\3\2\2\2\u0168\u0169\7f\2\2\u0169\u016a"+
		"\7(\2\2\u016a\u016e\5\32\16\2\u016b\u016c\7f\2\2\u016c\u016d\7\u009f\2"+
		"\2\u016d\u016f\5\32\16\2\u016e\u016b\3\2\2\2\u016e\u016f\3\2\2\2\u016f"+
		"\u0179\3\2\2\2\u0170\u0171\7f\2\2\u0171\u0172\7\u009f\2\2\u0172\u0176"+
		"\5\32\16\2\u0173\u0174\7f\2\2\u0174\u0175\7(\2\2\u0175\u0177\5\32\16\2"+
		"\u0176\u0173\3\2\2\2\u0176\u0177\3\2\2\2\u0177\u0179\3\2\2\2\u0178\u0168"+
		"\3\2\2\2\u0178\u0170\3\2\2\2\u0179\31\3\2\2\2\u017a\u0181\7}\2\2\u017b"+
		"\u0181\7\23\2\2\u017c\u017d\7\u0085\2\2\u017d\u0181\7e\2\2\u017e\u017f"+
		"\7\u019e\2\2\u017f\u0181\7\u00f7\2\2\u0180\u017a\3\2\2\2\u0180\u017b\3"+
		"\2\2\2\u0180\u017c\3\2\2\2\u0180\u017e\3\2\2\2\u0181\33\3\2\2\2\u0182"+
		"\u0184\t\4\2\2\u0183\u0185\5~@\2\u0184\u0183\3\2\2\2\u0184\u0185\3\2\2"+
		"\2\u0185\u0187\3\2\2\2\u0186\u0188\7\u00a2\2\2\u0187\u0186\3\2\2\2\u0187"+
		"\u0188\3\2\2\2\u0188\u0189\3\2\2\2\u0189\u018d\5\36\20\2\u018a\u018c\5"+
		"\"\22\2\u018b\u018a\3\2\2\2\u018c\u018f\3\2\2\2\u018d\u018b\3\2\2\2\u018d"+
		"\u018e\3\2\2\2\u018e\u019f\3\2\2\2\u018f\u018d\3\2\2\2\u0190\u0192\t\6"+
		"\2\2\u0191\u0193\t\4\2\2\u0192\u0191\3\2\2\2\u0192\u0193\3\2\2\2\u0193"+
		"\u0195\3\2\2\2\u0194\u0196\5~@\2\u0195\u0194\3\2\2\2\u0195\u0196\3\2\2"+
		"\2\u0196\u0197\3\2\2\2\u0197\u019b\5\36\20\2\u0198\u019a\5\"\22\2\u0199"+
		"\u0198\3\2\2\2\u019a\u019d\3\2\2\2\u019b\u0199\3\2\2\2\u019b\u019c\3\2"+
		"\2\2\u019c\u019f\3\2\2\2\u019d\u019b\3\2\2\2\u019e\u0182\3\2\2\2\u019e"+
		"\u0190\3\2\2\2\u019f\35\3\2\2\2\u01a0\u01a1\7\u03b3\2\2\u01a1\u01a6\5"+
		" \21\2\u01a2\u01a3\7\u03b5\2\2\u01a3\u01a5\5 \21\2\u01a4\u01a2\3\2\2\2"+
		"\u01a5\u01a8\3\2\2\2\u01a6\u01a4\3\2\2\2\u01a6\u01a7\3\2\2\2\u01a7\u01a9"+
		"\3\2\2\2\u01a8\u01a6\3\2\2\2\u01a9\u01aa\7\u03b4\2\2\u01aa\37\3\2\2\2"+
		"\u01ab\u01b0\5~@\2\u01ac\u01ad\7\u03b3\2\2\u01ad\u01ae\5b\62\2\u01ae\u01af"+
		"\7\u03b4\2\2\u01af\u01b1\3\2\2\2\u01b0\u01ac\3\2\2\2\u01b0\u01b1\3\2\2"+
		"\2\u01b1\u01b3\3\2\2\2\u01b2\u01b4\t\7\2\2\u01b3\u01b2\3\2\2\2\u01b3\u01b4"+
		"\3\2\2\2\u01b4!\3\2\2\2\u01b5\u01b7\7\u016b\2\2\u01b6\u01b8\7\u03aa\2"+
		"\2\u01b7\u01b6\3\2\2\2\u01b7\u01b8\3\2\2\2\u01b8\u01b9\3\2\2\2\u01b9\u01c1"+
		"\5d\63\2\u01ba\u01c1\7\u00a2\2\2\u01bb\u01bc\7\u00a7\2\2\u01bc\u01bd\7"+
		"\u01ae\2\2\u01bd\u01c1\5~@\2\u01be\u01bf\7\u0116\2\2\u01bf\u01c1\7\u03c2"+
		"\2\2\u01c0\u01b5\3\2\2\2\u01c0\u01ba\3\2\2\2\u01c0\u01bb\3\2\2\2\u01c0"+
		"\u01be\3\2\2\2\u01c1#\3\2\2\2\u01c2\u01c4\7.\2\2\u01c3\u01c5\7\u0206\2"+
		"\2\u01c4\u01c3\3\2\2\2\u01c4\u01c5\3\2\2\2\u01c5\u01c6\3\2\2\2\u01c6\u01c8"+
		"\7\u0093\2\2\u01c7\u01c9\5\u0094K\2\u01c8\u01c7\3\2\2\2\u01c8\u01c9\3"+
		"\2\2\2\u01c9\u01ca\3\2\2\2\u01ca\u01cc\5\u0080A\2\u01cb\u01cd\t\b\2\2"+
		"\u01cc\u01cb\3\2\2\2\u01cc\u01cd\3\2\2\2\u01cd%\3\2\2\2\u01ce\u01cf\7"+
		"y\2\2\u01cf\u01d0\7\u0093\2\2\u01d0\u01d5\5(\25\2\u01d1\u01d2\7\u03b5"+
		"\2\2\u01d2\u01d4\5(\25\2\u01d3\u01d1\3\2\2\2\u01d4\u01d7\3\2\2\2\u01d5"+
		"\u01d3\3\2\2\2\u01d5\u01d6\3\2\2\2\u01d6\'\3\2\2\2\u01d7\u01d5\3\2\2\2"+
		"\u01d8\u01d9\5\u0084C\2\u01d9\u01da\7\u0096\2\2\u01da\u01db\5\u0084C\2"+
		"\u01db)\3\2\2\2\u01dc\u01e0\7\u0084\2\2\u01dd\u01df\5,\27\2\u01de\u01dd"+
		"\3\2\2\2\u01df\u01e2\3\2\2\2\u01e0\u01de\3\2\2\2\u01e0\u01e1\3\2\2\2\u01e1"+
		"\u01e3\3\2\2\2\u01e2\u01e0\3\2\2\2\u01e3\u01e5\5.\30\2\u01e4\u01e6\5\62"+
		"\32\2\u01e5\u01e4\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6\u01e8\3\2\2\2\u01e7"+
		"\u01e9\5\64\33\2\u01e8\u01e7\3\2\2\2\u01e8\u01e9\3\2\2\2\u01e9\u01eb\3"+
		"\2\2\2\u01ea\u01ec\5> \2\u01eb\u01ea\3\2\2\2\u01eb\u01ec\3\2\2\2\u01ec"+
		"\u01ee\3\2\2\2\u01ed\u01ef\5@!\2\u01ee\u01ed\3\2\2\2\u01ee\u01ef\3\2\2"+
		"\2\u01ef\u0205\3\2\2\2\u01f0\u01f4\7\u0084\2\2\u01f1\u01f3\5,\27\2\u01f2"+
		"\u01f1\3\2\2\2\u01f3\u01f6\3\2\2\2\u01f4\u01f2\3\2\2\2\u01f4\u01f5\3\2"+
		"\2\2\u01f5\u01f7\3\2\2\2\u01f6\u01f4\3\2\2\2\u01f7\u01f9\5.\30\2\u01f8"+
		"\u01fa\5\64\33\2\u01f9\u01f8\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa\u01fc\3"+
		"\2\2\2\u01fb\u01fd\5> \2\u01fc\u01fb\3\2\2\2\u01fc\u01fd\3\2\2\2\u01fd"+
		"\u01ff\3\2\2\2\u01fe\u0200\5@!\2\u01ff\u01fe\3\2\2\2\u01ff\u0200\3\2\2"+
		"\2\u0200\u0202\3\2\2\2\u0201\u0203\5\62\32\2\u0202\u0201\3\2\2\2\u0202"+
		"\u0203\3\2\2\2\u0203\u0205\3\2\2\2\u0204\u01dc\3\2\2\2\u0204\u01f0\3\2"+
		"\2\2\u0205+\3\2\2\2\u0206\u0207\t\t\2\2\u0207-\3\2\2\2\u0208\u020b\7\u03a2"+
		"\2\2\u0209\u020b\5\60\31\2\u020a\u0208\3\2\2\2\u020a\u0209\3\2\2\2\u020b"+
		"\u0210\3\2\2\2\u020c\u020d\7\u03b5\2\2\u020d\u020f\5\60\31\2\u020e\u020c"+
		"\3\2\2\2\u020f\u0212\3\2\2\2\u0210\u020e\3\2\2\2\u0210\u0211\3\2\2\2\u0211"+
		"/\3\2\2\2\u0212\u0210\3\2\2\2\u0213\u0218\5\u0084C\2\u0214\u0216\7\f\2"+
		"\2\u0215\u0214\3\2\2\2\u0215\u0216\3\2\2\2\u0216\u0217\3\2\2\2\u0217\u0219"+
		"\5~@\2\u0218\u0215\3\2\2\2\u0218\u0219\3\2\2\2\u0219\u022a\3\2\2\2\u021a"+
		"\u021b\5\u0084C\2\u021b\u021c\7\u03b2\2\2\u021c\u021d\7\u03a2\2\2\u021d"+
		"\u022a\3\2\2\2\u021e\u021f\7\u03cd\2\2\u021f\u0221\7\u0399\2\2\u0220\u021e"+
		"\3\2\2\2\u0220\u0221\3\2\2\2\u0221\u0222\3\2\2\2\u0222\u0227\5R*\2\u0223"+
		"\u0225\7\f\2\2\u0224\u0223\3\2\2\2\u0224\u0225\3\2\2\2\u0225\u0226\3\2"+
		"\2\2\u0226\u0228\5~@\2\u0227\u0224\3\2\2\2\u0227\u0228\3\2\2\2\u0228\u022a"+
		"\3\2\2\2\u0229\u0213\3\2\2\2\u0229\u021a\3\2\2\2\u0229\u0220\3\2\2\2\u022a"+
		"\61\3\2\2\2\u022b\u022c\7K\2\2\u022c\u0231\5~@\2\u022d\u022e\7\u03b5\2"+
		"\2\u022e\u0230\5~@\2\u022f\u022d\3\2\2\2\u0230\u0233\3\2\2\2\u0231\u022f"+
		"\3\2\2\2\u0231\u0232\3\2\2\2\u0232\u0238\3\2\2\2\u0233\u0231\3\2\2\2\u0234"+
		"\u0235\7K\2\2\u0235\u0236\7\u0130\2\2\u0236\u0238\7\u03c2\2\2\u0237\u022b"+
		"\3\2\2\2\u0237\u0234\3\2\2\2\u0238\63\3\2\2\2\u0239\u023a\7<\2\2\u023a"+
		"\u023d\5\66\34\2\u023b\u023c\7\u00a5\2\2\u023c\u023e\5R*\2\u023d\u023b"+
		"\3\2\2\2\u023d\u023e\3\2\2\2\u023e\u024d\3\2\2\2\u023f\u0240\7?\2\2\u0240"+
		"\u0241\7\21\2\2\u0241\u0246\5D#\2\u0242\u0243\7\u03b5\2\2\u0243\u0245"+
		"\5D#\2\u0244\u0242\3\2\2\2\u0245\u0248\3\2\2\2\u0246\u0244\3\2\2\2\u0246"+
		"\u0247\3\2\2\2\u0247\u024b\3\2\2\2\u0248\u0246\3\2\2\2\u0249\u024a\7\u00a7"+
		"\2\2\u024a\u024c\7\u01d9\2\2\u024b\u0249\3\2\2\2\u024b\u024c\3\2\2\2\u024c"+
		"\u024e\3\2\2\2\u024d\u023f\3\2\2\2\u024d\u024e\3\2\2\2\u024e\u0251\3\2"+
		"\2\2\u024f\u0250\7@\2\2\u0250\u0252\5R*\2\u0251\u024f\3\2\2\2\u0251\u0252"+
		"\3\2\2\2\u0252\65\3\2\2\2\u0253\u0258\58\35\2\u0254\u0255\7\u03b5\2\2"+
		"\u0255\u0257\58\35\2\u0256\u0254\3\2\2\2\u0257\u025a\3\2\2\2\u0258\u0256"+
		"\3\2\2\2\u0258\u0259\3\2\2\2\u0259\67\3\2\2\2\u025a\u0258\3\2\2\2\u025b"+
		"\u025f\5:\36\2\u025c\u025e\5<\37\2\u025d\u025c\3\2\2\2\u025e\u0261\3\2"+
		"\2\2\u025f\u025d\3\2\2\2\u025f\u0260\3\2\2\2\u0260\u026d\3\2\2\2\u0261"+
		"\u025f\3\2\2\2\u0262\u0263\7\u03b3\2\2\u0263\u0267\5:\36\2\u0264\u0266"+
		"\5<\37\2\u0265\u0264\3\2\2\2\u0266\u0269\3\2\2\2\u0267\u0265\3\2\2\2\u0267"+
		"\u0268\3\2\2\2\u0268\u026a\3\2\2\2\u0269\u0267\3\2\2\2\u026a\u026b\7\u03b4"+
		"\2\2\u026b\u026d\3\2\2\2\u026c\u025b\3\2\2\2\u026c\u0262\3\2\2\2\u026d"+
		"9\3\2\2\2\u026e\u0280\5\u0084C\2\u026f\u0275\5*\26\2\u0270\u0271\7\u03b3"+
		"\2\2\u0271\u0272\5*\26\2\u0272\u0273\7\u03b4\2\2\u0273\u0275\3\2\2\2\u0274"+
		"\u026f\3\2\2\2\u0274\u0270\3\2\2\2\u0275\u0277\3\2\2\2\u0276\u0278\7\f"+
		"\2\2\u0277\u0276\3\2\2\2\u0277\u0278\3\2\2\2\u0278\u0279\3\2\2\2\u0279"+
		"\u027a\5~@\2\u027a\u0280\3\2\2\2\u027b\u027c\7\u03b3\2\2\u027c\u027d\5"+
		"\66\34\2\u027d\u027e\7\u03b4\2\2\u027e\u0280\3\2\2\2\u027f\u026e\3\2\2"+
		"\2\u027f\u0274\3\2\2\2\u027f\u027b\3\2\2\2\u0280;\3\2\2\2\u0281\u0283"+
		"\t\n\2\2\u0282\u0281\3\2\2\2\u0282\u0283\3\2\2\2\u0283\u0284\3\2\2\2\u0284"+
		"\u0285\7N\2\2\u0285\u028d\5:\36\2\u0286\u0287\7f\2\2\u0287\u028e\5R*\2"+
		"\u0288\u0289\7\u00a2\2\2\u0289\u028a\7\u03b3\2\2\u028a\u028b\5\u0080A"+
		"\2\u028b\u028c\7\u03b4\2\2\u028c\u028e\3\2\2\2\u028d\u0286\3\2\2\2\u028d"+
		"\u0288\3\2\2\2\u028d\u028e\3\2\2\2\u028e\u02ae\3\2\2\2\u028f\u0290\7\u0092"+
		"\2\2\u0290\u0293\5:\36\2\u0291\u0292\7f\2\2\u0292\u0294\5R*\2\u0293\u0291"+
		"\3\2\2\2\u0293\u0294\3\2\2\2\u0294\u02ae\3\2\2\2\u0295\u0297\t\13\2\2"+
		"\u0296\u0298\7m\2\2\u0297\u0296\3\2\2\2\u0297\u0298\3\2\2\2\u0298\u0299"+
		"\3\2\2\2\u0299\u029a\7N\2\2\u029a\u02a2\5:\36\2\u029b\u029c\7f\2\2\u029c"+
		"\u02a3\5R*\2\u029d\u029e\7\u00a2\2\2\u029e\u029f\7\u03b3\2\2\u029f\u02a0"+
		"\5\u0080A\2\u02a0\u02a1\7\u03b4\2\2\u02a1\u02a3\3\2\2\2\u02a2\u029b\3"+
		"\2\2\2\u02a2\u029d\3\2\2\2\u02a3\u02ae\3\2\2\2\u02a4\u02a9\7b\2\2\u02a5"+
		"\u02a7\t\13\2\2\u02a6\u02a8\7m\2\2\u02a7\u02a6\3\2\2\2\u02a7\u02a8\3\2"+
		"\2\2\u02a8\u02aa\3\2\2\2\u02a9\u02a5\3\2\2\2\u02a9\u02aa\3\2\2\2\u02aa"+
		"\u02ab\3\2\2\2\u02ab\u02ac\7N\2\2\u02ac\u02ae\5:\36\2\u02ad\u0282\3\2"+
		"\2\2\u02ad\u028f\3\2\2\2\u02ad\u0295\3\2\2\2\u02ad\u02a4\3\2\2\2\u02ae"+
		"=\3\2\2\2\u02af\u02b0\7k\2\2\u02b0\u02b1\7\21\2\2\u02b1\u02b6\5B\"\2\u02b2"+
		"\u02b3\7\u03b5\2\2\u02b3\u02b5\5B\"\2\u02b4\u02b2\3\2\2\2\u02b5\u02b8"+
		"\3\2\2\2\u02b6\u02b4\3\2\2\2\u02b6\u02b7\3\2\2\2\u02b7?\3\2\2\2\u02b8"+
		"\u02b6\3\2\2\2\u02b9\u02ba\7V\2\2\u02ba\u02bb\5b\62\2\u02bb\u02bc\7\u01a2"+
		"\2\2\u02bc\u02bd\5b\62\2\u02bdA\3\2\2\2\u02be\u02c0\5R*\2\u02bf\u02c1"+
		"\t\7\2\2\u02c0\u02bf\3\2\2\2\u02c0\u02c1\3\2\2\2\u02c1C\3\2\2\2\u02c2"+
		"\u02c4\5R*\2\u02c3\u02c5\t\7\2\2\u02c4\u02c3\3\2\2\2\u02c4\u02c5\3\2\2"+
		"\2\u02c5E\3\2\2\2\u02c6\u02c8\7I\2\2\u02c7\u02c9\7C\2\2\u02c8\u02c7\3"+
		"\2\2\2\u02c8\u02c9\3\2\2\2\u02c9\u02cb\3\2\2\2\u02ca\u02cc\7K\2\2\u02cb"+
		"\u02ca\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc\u02cd\3\2\2\2\u02cd\u02d2\5\u0084"+
		"C\2\u02ce\u02cf\7\u03b3\2\2\u02cf\u02d0\5\u0080A\2\u02d0\u02d1\7\u03b4"+
		"\2\2\u02d1\u02d3\3\2\2\2\u02d2\u02ce\3\2\2\2\u02d2\u02d3\3\2\2\2\u02d3"+
		"\u02d4\3\2\2\2\u02d4\u02d5\5H%\2\u02d5G\3\2\2\2\u02d6\u02e6\5*\26\2\u02d7"+
		"\u02d8\t\f\2\2\u02d8\u02d9\7\u03b3\2\2\u02d9\u02da\5\\/\2\u02da\u02e2"+
		"\7\u03b4\2\2\u02db\u02dc\7\u03b5\2\2\u02dc\u02dd\7\u03b3\2\2\u02dd\u02de"+
		"\5\\/\2\u02de\u02df\7\u03b4\2\2\u02df\u02e1\3\2\2\2\u02e0\u02db\3\2\2"+
		"\2\u02e1\u02e4\3\2\2\2\u02e2\u02e0\3\2\2\2\u02e2\u02e3\3\2\2\2\u02e3\u02e6"+
		"\3\2\2\2\u02e4\u02e2\3\2\2\2\u02e5\u02d6\3\2\2\2\u02e5\u02d7\3\2\2\2\u02e6"+
		"I\3\2\2\2\u02e7\u02e9\7\u009f\2\2\u02e8\u02ea\7C\2\2\u02e9\u02e8\3\2\2"+
		"\2\u02e9\u02ea\3\2\2\2\u02ea\u02eb\3\2\2\2\u02eb\u02f0\5\u0084C\2\u02ec"+
		"\u02ee\7\f\2\2\u02ed\u02ec\3\2\2\2\u02ed\u02ee\3\2\2\2\u02ee\u02ef\3\2"+
		"\2\2\u02ef\u02f1\5~@\2\u02f0\u02ed\3\2\2\2\u02f0\u02f1\3\2\2\2\u02f1\u02f2"+
		"\3\2\2\2\u02f2\u02f3\7\u0085\2\2\u02f3\u02f8\5L\'\2\u02f4\u02f5\7\u03b5"+
		"\2\2\u02f5\u02f7\5L\'\2\u02f6\u02f4\3\2\2\2\u02f7\u02fa\3\2\2\2\u02f8"+
		"\u02f6\3\2\2\2\u02f8\u02f9\3\2\2\2\u02f9\u02fd\3\2\2\2\u02fa\u02f8\3\2"+
		"\2\2\u02fb\u02fc\7\u00a5\2\2\u02fc\u02fe\5R*\2\u02fd\u02fb\3\2\2\2\u02fd"+
		"\u02fe\3\2\2\2\u02fe\u0300\3\2\2\2\u02ff\u0301\5> \2\u0300\u02ff\3\2\2"+
		"\2\u0300\u0301\3\2\2\2\u0301\u0303\3\2\2\2\u0302\u0304\5@!\2\u0303\u0302"+
		"\3\2\2\2\u0303\u0304\3\2\2\2\u0304K\3\2\2\2\u0305\u0306\5\u0084C\2\u0306"+
		"\u0307\7\u03aa\2\2\u0307\u0308\5Z.\2\u0308M\3\2\2\2\u0309\u030a\7(\2\2"+
		"\u030a\u030b\7<\2\2\u030b\u030e\5\u0084C\2\u030c\u030d\7\u00a5\2\2\u030d"+
		"\u030f\5R*\2\u030e\u030c\3\2\2\2\u030e\u030f\3\2\2\2\u030f\u0311\3\2\2"+
		"\2\u0310\u0312\5> \2\u0311\u0310\3\2\2\2\u0311\u0312\3\2\2\2\u0312\u0315"+
		"\3\2\2\2\u0313\u0314\7V\2\2\u0314\u0316\5b\62\2\u0315\u0313\3\2\2\2\u0315"+
		"\u0316\3\2\2\2\u0316O\3\2\2\2\u0317\u0319\7{\2\2\u0318\u031a\7K\2\2\u0319"+
		"\u0318\3\2\2\2\u0319\u031a\3\2\2\2\u031a\u031b\3\2\2\2\u031b\u0325\5\u0084"+
		"C\2\u031c\u031d\7\u03b3\2\2\u031d\u031e\5\u0080A\2\u031e\u031f\7\u03b4"+
		"\2\2\u031f\u0321\3\2\2\2\u0320\u031c\3\2\2\2\u0320\u0321\3\2\2\2\u0321"+
		"\u0322\3\2\2\2\u0322\u0326\5H%\2\u0323\u0324\7\u0085\2\2\u0324\u0326\5"+
		"L\'\2\u0325\u0320\3\2\2\2\u0325\u0323\3\2\2\2\u0326Q\3\2\2\2\u0327\u0328"+
		"\b*\1\2\u0328\u0329\t\r\2\2\u0329\u0333\5R*\6\u032a\u032b\5V,\2\u032b"+
		"\u032d\7L\2\2\u032c\u032e\7c\2\2\u032d\u032c\3\2\2\2\u032d\u032e\3\2\2"+
		"\2\u032e\u032f\3\2\2\2\u032f\u0330\t\16\2\2\u0330\u0333\3\2\2\2\u0331"+
		"\u0333\5V,\2\u0332\u0327\3\2\2\2\u0332\u032a\3\2\2\2\u0332\u0331\3\2\2"+
		"\2\u0333\u033a\3\2\2\2\u0334\u0335\f\5\2\2\u0335\u0336\5x=\2\u0336\u0337"+
		"\5R*\6\u0337\u0339\3\2\2\2\u0338\u0334\3\2\2\2\u0339\u033c\3\2\2\2\u033a"+
		"\u0338\3\2\2\2\u033a\u033b\3\2\2\2\u033bS\3\2\2\2\u033c\u033a\3\2\2\2"+
		"\u033d\u0342\5R*\2\u033e\u033f\7\u03b5\2\2\u033f\u0341\5R*\2\u0340\u033e"+
		"\3\2\2\2\u0341\u0344\3\2\2\2\u0342\u0340\3\2\2\2\u0342\u0343\3\2\2\2\u0343"+
		"U\3\2\2\2\u0344\u0342\3\2\2\2\u0345\u0348\b,\1\2\u0346\u0347\7\u03cd\2"+
		"\2\u0347\u0349\7\u0399\2\2\u0348\u0346\3\2\2\2\u0348\u0349\3\2\2\2\u0349"+
		"\u034a\3\2\2\2\u034a\u034b\5X-\2\u034b\u0385\3\2\2\2\u034c\u034d\f\t\2"+
		"\2\u034d\u034e\5v<\2\u034e\u034f\5V,\n\u034f\u0384\3\2\2\2\u0350\u0352"+
		"\f\7\2\2\u0351\u0353\7c\2\2\u0352\u0351\3\2\2\2\u0352\u0353\3\2\2\2\u0353"+
		"\u0354\3\2\2\2\u0354\u0355\7\17\2\2\u0355\u0356\5V,\2\u0356\u0357\7\13"+
		"\2\2\u0357\u0358\5V,\b\u0358\u0384\3\2\2\2\u0359\u035a\f\6\2\2\u035a\u035b"+
		"\7\u01ed\2\2\u035b\u035c\7U\2\2\u035c\u0384\5V,\7\u035d\u035f\f\4\2\2"+
		"\u035e\u0360\7c\2\2\u035f\u035e\3\2\2\2\u035f\u0360\3\2\2\2\u0360\u0361"+
		"\3\2\2\2\u0361\u0362\t\17\2\2\u0362\u0384\5V,\5\u0363\u0365\f\13\2\2\u0364"+
		"\u0366\7c\2\2\u0365\u0364\3\2\2\2\u0365\u0366\3\2\2\2\u0366\u0367\3\2"+
		"\2\2\u0367\u0368\7D\2\2\u0368\u036b\7\u03b3\2\2\u0369\u036c\5*\26\2\u036a"+
		"\u036c\5T+\2\u036b\u0369\3\2\2\2\u036b\u036a\3\2\2\2\u036c\u036d\3\2\2"+
		"\2\u036d\u036e\7\u03b4\2\2\u036e\u0384\3\2\2\2\u036f\u0370\f\n\2\2\u0370"+
		"\u0371\7L\2\2\u0371\u0384\5\u0088E\2\u0372\u0373\f\b\2\2\u0373\u0374\5"+
		"v<\2\u0374\u0375\t\20\2\2\u0375\u0376\7\u03b3\2\2\u0376\u0377\5*\26\2"+
		"\u0377\u0378\7\u03b4\2\2\u0378\u0384\3\2\2\2\u0379\u037b\f\5\2\2\u037a"+
		"\u037c\7c\2\2\u037b\u037a\3\2\2\2\u037b\u037c\3\2\2\2\u037c\u037d\3\2"+
		"\2\2\u037d\u037e\7U\2\2\u037e\u0381\5V,\2\u037f\u0380\7\u013b\2\2\u0380"+
		"\u0382\7\u03c2\2\2\u0381\u037f\3\2\2\2\u0381\u0382\3\2\2\2\u0382\u0384"+
		"\3\2\2\2\u0383\u034c\3\2\2\2\u0383\u0350\3\2\2\2\u0383\u0359\3\2\2\2\u0383"+
		"\u035d\3\2\2\2\u0383\u0363\3\2\2\2\u0383\u036f\3\2\2\2\u0383\u0372\3\2"+
		"\2\2\u0383\u0379\3\2\2\2\u0384\u0387\3\2\2\2\u0385\u0383\3\2\2\2\u0385"+
		"\u0386\3\2\2\2\u0386W\3\2\2\2\u0387\u0385\3\2\2\2\u0388\u0389\b-\1\2\u0389"+
		"\u03b5\5^\60\2\u038a\u03b5\5\u0084C\2\u038b\u03b5\5j\66\2\u038c\u038d"+
		"\5t;\2\u038d\u038e\5X-\13\u038e\u03b5\3\2\2\2\u038f\u0390\7\u00bd\2\2"+
		"\u0390\u03b5\5X-\n\u0391\u0392\7\u03b3\2\2\u0392\u0397\5R*\2\u0393\u0394"+
		"\7\u03b5\2\2\u0394\u0396\5R*\2\u0395\u0393\3\2\2\2\u0396\u0399\3\2\2\2"+
		"\u0397\u0395\3\2\2\2\u0397\u0398\3\2\2\2\u0398\u039a\3\2\2\2\u0399\u0397"+
		"\3\2\2\2\u039a\u039b\7\u03b4\2\2\u039b\u03b5\3\2\2\2\u039c\u039d\7\u01db"+
		"\2\2\u039d\u039e\7\u03b3\2\2\u039e\u03a1\5R*\2\u039f\u03a0\7\u03b5\2\2"+
		"\u03a0\u03a2\5R*\2\u03a1\u039f\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\u03a1"+
		"\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5\u03a6\7\u03b4\2"+
		"\2\u03a6\u03b5\3\2\2\2\u03a7\u03a8\7\64\2\2\u03a8\u03a9\7\u03b3\2\2\u03a9"+
		"\u03aa\5*\26\2\u03aa\u03ab\7\u03b4\2\2\u03ab\u03b5\3\2\2\2\u03ac\u03ad"+
		"\7\u03b3\2\2\u03ad\u03ae\5*\26\2\u03ae\u03af\7\u03b4\2\2\u03af\u03b5\3"+
		"\2\2\2\u03b0\u03b1\7J\2\2\u03b1\u03b2\5R*\2\u03b2\u03b3\5\u008aF\2\u03b3"+
		"\u03b5\3\2\2\2\u03b4\u0388\3\2\2\2\u03b4\u038a\3\2\2\2\u03b4\u038b\3\2"+
		"\2\2\u03b4\u038c\3\2\2\2\u03b4\u038f\3\2\2\2\u03b4\u0391\3\2\2\2\u03b4"+
		"\u039c\3\2\2\2\u03b4\u03a7\3\2\2\2\u03b4\u03ac\3\2\2\2\u03b4\u03b0\3\2"+
		"\2\2\u03b5\u03c0\3\2\2\2\u03b6\u03b7\f\4\2\2\u03b7\u03b8\5z>\2\u03b8\u03b9"+
		"\5X-\5\u03b9\u03bf\3\2\2\2\u03ba\u03bb\f\3\2\2\u03bb\u03bc\5|?\2\u03bc"+
		"\u03bd\5X-\4\u03bd\u03bf\3\2\2\2\u03be\u03b6\3\2\2\2\u03be\u03ba\3\2\2"+
		"\2\u03bf\u03c2\3\2\2\2\u03c0\u03be\3\2\2\2\u03c0\u03c1\3\2\2\2\u03c1Y"+
		"\3\2\2\2\u03c2\u03c0\3\2\2\2\u03c3\u03c6\5R*\2\u03c4\u03c6\7&\2\2\u03c5"+
		"\u03c3\3\2\2\2\u03c5\u03c4\3\2\2\2\u03c6[\3\2\2\2\u03c7\u03cc\5Z.\2\u03c8"+
		"\u03c9\7\u03b5\2\2\u03c9\u03cb\5Z.\2\u03ca\u03c8\3\2\2\2\u03cb\u03ce\3"+
		"\2\2\2\u03cc\u03ca\3\2\2\2\u03cc\u03cd\3\2\2\2\u03cd]\3\2\2\2\u03ce\u03cc"+
		"\3\2\2\2\u03cf\u03da\5h\65\2\u03d0\u03da\5b\62\2\u03d1\u03da\5`\61\2\u03d2"+
		"\u03da\5f\64\2\u03d3\u03da\7\u03c5\2\2\u03d4\u03da\7\u03c7\2\2\u03d5\u03d7"+
		"\7c\2\2\u03d6\u03d5\3\2\2\2\u03d6\u03d7\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8"+
		"\u03da\7e\2\2\u03d9\u03cf\3\2\2\2\u03d9\u03d0\3\2\2\2\u03d9\u03d1\3\2"+
		"\2\2\u03d9\u03d2\3\2\2\2\u03d9\u03d3\3\2\2\2\u03d9\u03d4\3\2\2\2\u03d9"+
		"\u03d6\3\2\2\2\u03da_\3\2\2\2\u03db\u03dd\7\u03c8\2\2\u03dc\u03db\3\2"+
		"\2\2\u03dc\u03dd\3\2\2\2\u03dd\u03de\3\2\2\2\u03de\u03e1\7\u03c2\2\2\u03df"+
		"\u03e1\7\u03c1\2\2\u03e0\u03dc\3\2\2\2\u03e0\u03df\3\2\2\2\u03e1\u03e3"+
		"\3\2\2\2\u03e2\u03e4\7\u03c2\2\2\u03e3\u03e2\3\2\2\2\u03e4\u03e5\3\2\2"+
		"\2\u03e5\u03e3\3\2\2\2\u03e5\u03e6\3\2\2\2\u03e6\u03ef\3\2\2\2\u03e7\u03e9"+
		"\7\u03c8\2\2\u03e8\u03e7\3\2\2\2\u03e8\u03e9\3\2\2\2\u03e9\u03ea\3\2\2"+
		"\2\u03ea\u03ed\7\u03c2\2\2\u03eb\u03ed\7\u03c1\2\2\u03ec\u03e8\3\2\2\2"+
		"\u03ec\u03eb\3\2\2\2\u03ed\u03ef\3\2\2\2\u03ee\u03e0\3\2\2\2\u03ee\u03ec"+
		"\3\2\2\2\u03efa\3\2\2\2\u03f0\u03f1\t\21\2\2\u03f1c\3\2\2\2\u03f2\u03f5"+
		"\7\u03c0\2\2\u03f3\u03f5\5b\62\2\u03f4\u03f2\3\2\2\2\u03f4\u03f3\3\2\2"+
		"\2\u03f5e\3\2\2\2\u03f6\u03f8\7\u03c8\2\2\u03f7\u03f6\3\2\2\2\u03f7\u03f8"+
		"\3\2\2\2\u03f8\u03f9\3\2\2\2\u03f9\u03fa\7\u03c4\2\2\u03fag\3\2\2\2\u03fb"+
		"\u03fc\t\22\2\2\u03fci\3\2\2\2\u03fd\u0400\5l\67\2\u03fe\u0400\5n8\2\u03ff"+
		"\u03fd\3\2\2\2\u03ff\u03fe\3\2\2\2\u0400k\3\2\2\2\u0401\u0402\t\23\2\2"+
		"\u0402\u0405\7\u03b3\2\2\u0403\u0406\5`\61\2\u0404\u0406\5R*\2\u0405\u0403"+
		"\3\2\2\2\u0405\u0404\3\2\2\2\u0406\u0407\3\2\2\2\u0407\u040a\7<\2\2\u0408"+
		"\u040b\5b\62\2\u0409\u040b\5R*\2\u040a\u0408\3\2\2\2\u040a\u0409\3\2\2"+
		"\2\u040b\u0411\3\2\2\2\u040c\u040f\79\2\2\u040d\u0410\5b\62\2\u040e\u0410"+
		"\5R*\2\u040f\u040d\3\2\2\2\u040f\u040e\3\2\2\2\u0410\u0412\3\2\2\2\u0411"+
		"\u040c\3\2\2\2\u0411\u0412\3\2\2\2\u0412\u0413\3\2\2\2\u0413\u0414\7\u03b4"+
		"\2\2\u0414\u0437\3\2\2\2\u0415\u0416\7\u00f2\2\2\u0416\u0417\7\u03b3\2"+
		"\2\u0417\u041a\t\24\2\2\u0418\u041b\5`\61\2\u0419\u041b\5R*\2\u041a\u0418"+
		"\3\2\2\2\u041a\u0419\3\2\2\2\u041a\u041b\3\2\2\2\u041b\u041c\3\2\2\2\u041c"+
		"\u041f\7<\2\2\u041d\u0420\5`\61\2\u041e\u0420\5R*\2\u041f\u041d\3\2\2"+
		"\2\u041f\u041e\3\2\2\2\u0420\u0421\3\2\2\2\u0421\u0422\7\u03b4\2\2\u0422"+
		"\u0437\3\2\2\2\u0423\u0424\7\u00f2\2\2\u0424\u0427\7\u03b3\2\2\u0425\u0428"+
		"\5`\61\2\u0426\u0428\5R*\2\u0427\u0425\3\2\2\2\u0427\u0426\3\2\2\2\u0428"+
		"\u0429\3\2\2\2\u0429\u042c\7<\2\2\u042a\u042d\5`\61\2\u042b\u042d\5R*"+
		"\2\u042c\u042a\3\2\2\2\u042c\u042b\3\2\2\2\u042d\u042e\3\2\2\2\u042e\u042f"+
		"\7\u03b4\2\2\u042f\u0437\3\2\2\2\u0430\u0437\t\25\2\2\u0431\u0432\7\u00a3"+
		"\2\2\u0432\u0433\7\u03b3\2\2\u0433\u0434\5\u0084C\2\u0434\u0435\7\u03b4"+
		"\2\2\u0435\u0437\3\2\2\2\u0436\u0401\3\2\2\2\u0436\u0415\3\2\2\2\u0436"+
		"\u0423\3\2\2\2\u0436\u0430\3\2\2\2\u0436\u0431\3\2\2\2\u0437m\3\2\2\2"+
		"\u0438\u0439\t\26\2\2\u0439\u043b\7\u03b3\2\2\u043a\u043c\t\27\2\2\u043b"+
		"\u043a\3\2\2\2\u043b\u043c\3\2\2\2\u043c\u043d\3\2\2\2\u043d\u043e\5p"+
		"9\2\u043e\u043f\7\u03b4\2\2\u043f\u0471\3\2\2\2\u0440\u0441\7\u00d7\2"+
		"\2\u0441\u0447\7\u03b3\2\2\u0442\u0448\7\u03a2\2\2\u0443\u0445\7\b\2\2"+
		"\u0444\u0443\3\2\2\2\u0444\u0445\3\2\2\2\u0445\u0446\3\2\2\2\u0446\u0448"+
		"\5p9\2\u0447\u0442\3\2\2\2\u0447\u0444\3\2\2\2\u0448\u0449\3\2\2\2\u0449"+
		"\u0471\7\u03b4\2\2\u044a\u044b\7\u00d7\2\2\u044b\u044c\7\u03b3\2\2\u044c"+
		"\u044d\7,\2\2\u044d\u044e\5r:\2\u044e\u044f\7\u03b4\2\2\u044f\u0471\3"+
		"\2\2\2\u0450\u0451\t\30\2\2\u0451\u0453\7\u03b3\2\2\u0452\u0454\7\b\2"+
		"\2\u0453\u0452\3\2\2\2\u0453\u0454\3\2\2\2\u0454\u0455\3\2\2\2\u0455\u0456"+
		"\5p9\2\u0456\u0457\7\u03b4\2\2\u0457\u0471\3\2\2\2\u0458\u0459\7\u00d8"+
		"\2\2\u0459\u045b\7\u03b3\2\2\u045a\u045c\7,\2\2\u045b\u045a\3\2\2\2\u045b"+
		"\u045c\3\2\2\2\u045c\u045d\3\2\2\2\u045d\u0468\5r:\2\u045e\u045f\7k\2"+
		"\2\u045f\u0460\7\21\2\2\u0460\u0465\5B\"\2\u0461\u0462\7\u03b5\2\2\u0462"+
		"\u0464\5B\"\2\u0463\u0461\3\2\2\2\u0464\u0467\3\2\2\2\u0465\u0463\3\2"+
		"\2\2\u0465\u0466\3\2\2\2\u0466\u0469\3\2\2\2\u0467\u0465\3\2\2\2\u0468"+
		"\u045e\3\2\2\2\u0468\u0469\3\2\2\2\u0469\u046c\3\2\2\2\u046a\u046b\7\u0086"+
		"\2\2\u046b\u046d\7\u03c2\2\2\u046c\u046a\3\2\2\2\u046c\u046d\3\2\2\2\u046d"+
		"\u046e\3\2\2\2\u046e\u046f\7\u03b4\2\2\u046f\u0471\3\2\2\2\u0470\u0438"+
		"\3\2\2\2\u0470\u0440\3\2\2\2\u0470\u044a\3\2\2\2\u0470\u0450\3\2\2\2\u0470"+
		"\u0458\3\2\2\2\u0471o\3\2\2\2\u0472\u0476\5^\60\2\u0473\u0476\5\u0084"+
		"C\2\u0474\u0476\5R*\2\u0475\u0472\3\2\2\2\u0475\u0473\3\2\2\2\u0475\u0474"+
		"\3\2\2\2\u0476q\3\2\2\2\u0477\u047c\5p9\2\u0478\u0479\7\u03b5\2\2\u0479"+
		"\u047b\5p9\2\u047a\u0478\3\2\2\2\u047b\u047e\3\2\2\2\u047c\u047a\3\2\2"+
		"\2\u047c\u047d\3\2\2\2\u047ds\3\2\2\2\u047e\u047c\3\2\2\2\u047f\u0480"+
		"\t\31\2\2\u0480u\3\2\2\2\u0481\u0490\7\u03aa\2\2\u0482\u0490\7\u03ab\2"+
		"\2\u0483\u0490\7\u03ac\2\2\u0484\u0485\7\u03ac\2\2\u0485\u0490\7\u03aa"+
		"\2\2\u0486\u0487\7\u03ab\2\2\u0487\u0490\7\u03aa\2\2\u0488\u0489\7\u03ac"+
		"\2\2\u0489\u0490\7\u03ab\2\2\u048a\u048b\7\u03ad\2\2\u048b\u0490\7\u03aa"+
		"\2\2\u048c\u048d\7\u03ac\2\2\u048d\u048e\7\u03aa\2\2\u048e\u0490\7\u03ab"+
		"\2\2\u048f\u0481\3\2\2\2\u048f\u0482\3\2\2\2\u048f\u0483\3\2\2\2\u048f"+
		"\u0484\3\2\2\2\u048f\u0486\3\2\2\2\u048f\u0488\3\2\2\2\u048f\u048a\3\2"+
		"\2\2\u048f\u048c\3\2\2\2\u0490w\3\2\2\2\u0491\u0499\7\13\2\2\u0492\u0499"+
		"\7\u00a9\2\2\u0493\u0499\7j\2\2\u0494\u0495\7\u03b0\2\2\u0495\u0499\7"+
		"\u03b0\2\2\u0496\u0497\7\u03af\2\2\u0497\u0499\7\u03af\2\2\u0498\u0491"+
		"\3\2\2\2\u0498\u0492\3\2\2\2\u0498\u0493\3\2\2\2\u0498\u0494\3\2\2\2\u0498"+
		"\u0496\3\2\2\2\u0499y\3\2\2\2\u049a\u049b\7\u03ac\2\2\u049b\u04a2\7\u03ac"+
		"\2\2\u049c\u049d\7\u03ab\2\2\u049d\u04a2\7\u03ab\2\2\u049e\u04a2\7\u03b0"+
		"\2\2\u049f\u04a2\7\u03b1\2\2\u04a0\u04a2\7\u03af\2\2\u04a1\u049a\3\2\2"+
		"\2\u04a1\u049c\3\2\2\2\u04a1\u049e\3\2\2\2\u04a1\u049f\3\2\2\2\u04a1\u04a0"+
		"\3\2\2\2\u04a2{\3\2\2\2\u04a3\u04a4\t\32\2\2\u04a4}\3\2\2\2\u04a5\u04a9"+
		"\7\u03ca\2\2\u04a6\u04a9\5\u008aF\2\u04a7\u04a9\5\u008cG\2\u04a8\u04a5"+
		"\3\2\2\2\u04a8\u04a6\3\2\2\2\u04a8\u04a7\3\2\2\2\u04a9\177\3\2\2\2\u04aa"+
		"\u04af\5~@\2\u04ab\u04ac\7\u03b5\2\2\u04ac\u04ae\5~@\2\u04ad\u04ab\3\2"+
		"\2\2\u04ae\u04b1\3\2\2\2\u04af\u04ad\3\2\2\2\u04af\u04b0\3\2\2\2\u04b0"+
		"\u0081\3\2\2\2\u04b1\u04af\3\2\2\2\u04b2\u04b6\7\u03c9\2\2\u04b3\u04b4"+
		"\7\u03b2\2\2\u04b4\u04b6\5~@\2\u04b5\u04b2\3\2\2\2\u04b5\u04b3\3\2\2\2"+
		"\u04b6\u0083\3\2\2\2\u04b7\u04bc\5~@\2\u04b8\u04ba\5\u0082B\2\u04b9\u04bb"+
		"\5\u0082B\2\u04ba\u04b9\3\2\2\2\u04ba\u04bb\3\2\2\2\u04bb\u04bd\3\2\2"+
		"\2\u04bc\u04b8\3\2\2\2\u04bc\u04bd\3\2\2\2\u04bd\u0085\3\2\2\2\u04be\u04c7"+
		"\7e\2\2\u04bf\u04c7\5^\60\2\u04c0\u04c4\7\u00e5\2\2\u04c1\u04c2\7f\2\2"+
		"\u04c2\u04c3\7\u009f\2\2\u04c3\u04c5\7\u00ec\2\2\u04c4\u04c1\3\2\2\2\u04c4"+
		"\u04c5\3\2\2\2\u04c5\u04c7\3\2\2\2\u04c6\u04be\3\2\2\2\u04c6\u04bf\3\2"+
		"\2\2\u04c6\u04c0\3\2\2\2\u04c7\u0087\3\2\2\2\u04c8\u04ca\7c\2\2\u04c9"+
		"\u04c8\3\2\2\2\u04c9\u04ca\3\2\2\2\u04ca\u04cb\3\2\2\2\u04cb\u04cc\7e"+
		"\2\2\u04cc\u0089\3\2\2\2\u04cd\u04ce\t\33\2\2\u04ce\u008b\3\2\2\2\u04cf"+
		"\u04d1\t\34\2\2\u04d0\u04d2\5\u008eH\2\u04d1\u04d0\3\2\2\2\u04d1\u04d2"+
		"\3\2\2\2\u04d2\u04d4\3\2\2\2\u04d3\u04d5\7\u00bd\2\2\u04d4\u04d3\3\2\2"+
		"\2\u04d4\u04d5\3\2\2\2\u04d5\u0508\3\2\2\2\u04d6\u04d8\t\35\2\2\u04d7"+
		"\u04d9\5\u008eH\2\u04d8\u04d7\3\2\2\2\u04d8\u04d9\3\2\2\2\u04d9\u04db"+
		"\3\2\2\2\u04da\u04dc\7\u009e\2\2\u04db\u04da\3\2\2\2\u04db\u04dc\3\2\2"+
		"\2\u04dc\u04de\3\2\2\2\u04dd\u04df\7\u00aa\2\2\u04de\u04dd\3\2\2\2\u04de"+
		"\u04df\3\2\2\2\u04df\u0508\3\2\2\2\u04e0\u04e2\t\36\2\2\u04e1\u04e3\5"+
		"\u0090I\2\u04e2\u04e1\3\2\2\2\u04e2\u04e3\3\2\2\2\u04e3\u04e5\3\2\2\2"+
		"\u04e4\u04e6\7\u009e\2\2\u04e5\u04e4\3\2\2\2\u04e5\u04e6\3\2\2\2\u04e6"+
		"\u04e8\3\2\2\2\u04e7\u04e9\7\u00aa\2\2\u04e8\u04e7\3\2\2\2\u04e8\u04e9"+
		"\3\2\2\2\u04e9\u0508\3\2\2\2\u04ea\u04ec\t\37\2\2\u04eb\u04ed\5\u0092"+
		"J\2\u04ec\u04eb\3\2\2\2\u04ec\u04ed\3\2\2\2\u04ed\u04ef\3\2\2\2\u04ee"+
		"\u04f0\7\u009e\2\2\u04ef\u04ee\3\2\2\2\u04ef\u04f0\3\2\2\2\u04f0\u04f2"+
		"\3\2\2\2\u04f1\u04f3\7\u00aa\2\2\u04f2\u04f1\3\2\2\2\u04f2\u04f3\3\2\2"+
		"\2\u04f3\u0508\3\2\2\2\u04f4\u0508\t \2\2\u04f5\u04f7\t!\2\2\u04f6\u04f8"+
		"\5\u008eH\2\u04f7\u04f6\3\2\2\2\u04f7\u04f8\3\2\2\2\u04f8\u0508\3\2\2"+
		"\2\u04f9\u04fa\t\"\2\2\u04fa\u04fb\7\u03b3\2\2\u04fb\u0500\7\u03c2\2\2"+
		"\u04fc\u04fd\7\u03b5\2\2\u04fd\u04ff\7\u03c2\2\2\u04fe\u04fc\3\2\2\2\u04ff"+
		"\u0502\3\2\2\2\u0500\u04fe\3\2\2\2\u0500\u0501\3\2\2\2\u0501\u0503\3\2"+
		"\2\2\u0502\u0500\3\2\2\2\u0503\u0505\7\u03b4\2\2\u0504\u0506\7\u00bd\2"+
		"\2\u0505\u0504\3\2\2\2\u0505\u0506\3\2\2\2\u0506\u0508\3\2\2\2\u0507\u04cf"+
		"\3\2\2\2\u0507\u04d6\3\2\2\2\u0507\u04e0\3\2\2\2\u0507\u04ea\3\2\2\2\u0507"+
		"\u04f4\3\2\2\2\u0507\u04f5\3\2\2\2\u0507\u04f9\3\2\2\2\u0508\u008d\3\2"+
		"\2\2\u0509\u050a\7\u03b3\2\2\u050a\u050b\5b\62\2\u050b\u050c\7\u03b4\2"+
		"\2\u050c\u008f\3\2\2\2\u050d\u050e\7\u03b3\2\2\u050e\u050f\5b\62\2\u050f"+
		"\u0510\7\u03b5\2\2\u0510\u0511\5b\62\2\u0511\u0512\7\u03b4\2\2\u0512\u0091"+
		"\3\2\2\2\u0513\u0514\7\u03b3\2\2\u0514\u0517\5b\62\2\u0515\u0516\7\u03b5"+
		"\2\2\u0516\u0518\5b\62\2\u0517\u0515\3\2\2\2\u0517\u0518\3\2\2\2\u0518"+
		"\u0519\3\2\2\2\u0519\u051a\7\u03b4\2\2\u051a\u0093\3\2\2\2\u051b\u051c"+
		"\7B\2\2\u051c\u051d\7\64\2\2\u051d\u0095\3\2\2\2\u051e\u051f\7B\2\2\u051f"+
		"\u0520\7c\2\2\u0520\u0521\7\64\2\2\u0521\u0097\3\2\2\2\u00c8\u009d\u00a4"+
		"\u00a8\u00b6\u00be\u00c5\u00cc\u00d4\u00da\u00de\u00e2\u00e6\u00eb\u00ef"+
		"\u00f3\u00fc\u0101\u0108\u010d\u0114\u0119\u011e\u0122\u0124\u0129\u012f"+
		"\u0134\u0136\u013a\u013d\u0140\u0146\u014b\u014d\u0152\u015c\u0163\u0166"+
		"\u016e\u0176\u0178\u0180\u0184\u0187\u018d\u0192\u0195\u019b\u019e\u01a6"+
		"\u01b0\u01b3\u01b7\u01c0\u01c4\u01c8\u01cc\u01d5\u01e0\u01e5\u01e8\u01eb"+
		"\u01ee\u01f4\u01f9\u01fc\u01ff\u0202\u0204\u020a\u0210\u0215\u0218\u0220"+
		"\u0224\u0227\u0229\u0231\u0237\u023d\u0246\u024b\u024d\u0251\u0258\u025f"+
		"\u0267\u026c\u0274\u0277\u027f\u0282\u028d\u0293\u0297\u02a2\u02a7\u02a9"+
		"\u02ad\u02b6\u02c0\u02c4\u02c8\u02cb\u02d2\u02e2\u02e5\u02e9\u02ed\u02f0"+
		"\u02f8\u02fd\u0300\u0303\u030e\u0311\u0315\u0319\u0320\u0325\u032d\u0332"+
		"\u033a\u0342\u0348\u0352\u035f\u0365\u036b\u037b\u0381\u0383\u0385\u0397"+
		"\u03a3\u03b4\u03be\u03c0\u03c5\u03cc\u03d6\u03d9\u03dc\u03e0\u03e5\u03e8"+
		"\u03ec\u03ee\u03f4\u03f7\u03ff\u0405\u040a\u040f\u0411\u041a\u041f\u0427"+
		"\u042c\u0436\u043b\u0444\u0447\u0453\u045b\u0465\u0468\u046c\u0470\u0475"+
		"\u047c\u048f\u0498\u04a1\u04a8\u04af\u04b5\u04ba\u04bc\u04c4\u04c6\u04c9"+
		"\u04d1\u04d4\u04d8\u04db\u04de\u04e2\u04e5\u04e8\u04ec\u04ef\u04f2\u04f7"+
		"\u0500\u0505\u0507\u0517";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}